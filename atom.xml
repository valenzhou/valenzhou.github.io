<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.喵的网络日志</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-12T03:22:42.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ValenZhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;CSS世界&gt;读书笔记</title>
    <link href="http://yoursite.com/2018/04/12/CSS%E4%B8%96%E7%95%8C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/12/CSS世界-读书笔记/</id>
    <published>2018-04-12T03:11:01.000Z</published>
    <updated>2018-04-12T03:22:42.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在看张鑫旭的<code>&lt;&lt;CSS世界&gt;&gt;</code>,对里面说的一些干货做了点总结,如果希望看到更多知识,请自行购买.</p></blockquote><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><h4 id="何为流"><a href="#何为流" class="headerlink" title="何为流?"></a>何为流?</h4><p>“流”实际上是CSS世界中的一种基本的定位和布局机制,可以理解为现实世界的一套物理规则,”流”和现实世界的”水流”有异曲同工之妙.就好像我们把水流入一个容器,水面一定是平整的,我们在水中放入物体,水面升高物体依次排列.所以”流”就是CSS世界中引导元素排列和定位的一条看不见的水流.</p><h3 id="流-元素与基本尺寸"><a href="#流-元素与基本尺寸" class="headerlink" title="流,元素与基本尺寸"></a>流,元素与基本尺寸</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>“块级元素”和<code>display:block;</code>不是一个概念.比如<code>&lt;li&gt;</code>元素默认的display是list-item,<code>&lt;table&gt;</code>对应的display是table,但它们都是块级元素,因为它们符合块级元素的特征,也就是一个水平流上只能单独显示一个元素,多个元素则换行显示.正是由于块级元素的换行特性,理论上它都可以配合clear属性来清除浮动.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    display: table;//或block等.</span><br><span class="line">    <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="外部尺寸和内部尺寸"><a href="#外部尺寸和内部尺寸" class="headerlink" title="外部尺寸和内部尺寸"></a>外部尺寸和内部尺寸</h4><p>当一个元素的尺寸由外部元素决定就称为外部尺寸,当一个元素的尺寸由内部元素决定就称为内部尺寸.</p><h4 id="深藏不漏的width-auto"><a href="#深藏不漏的width-auto" class="headerlink" title="深藏不漏的width: auto"></a>深藏不漏的width: auto</h4><ul><li><p>正常流宽度</p><p>在页面中随便扔一个div元素,它就会具备block容器的流特性.</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a元素的display 默认是 inline,当它设置为 block的时候使其具有块状化.但width设置为100%则完全没有必要.”鑫三无原则”,即”无宽度,无图片,无浮动”.为何无宽度?因为表现为”外部尺寸的”块级元素一旦设置了宽度,流动性就失去了.<strong>所谓流动性,并不是看上去宽度为100%那么简单,而是一直margin/border/padding以及content内容区域自动分配水平空间的机制.</strong></p><ul><li><p>格式化宽度</p><p>格式化宽度值出现在”绝对定位模型”中,也就是当position为absolute或fixed元素中,默认情况下,绝对定位元素的宽度是由内部尺寸决定的,但是有一种情况宽度由外部尺寸决定.对于非替换元素(…)当left/right或top/bottom<strong>对立的属性值同时存在时,元素的宽度为格式化宽度</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    div2&#123;</span><br><span class="line">        <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">        <span class="selector-tag">left</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">right</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上样式可知,div2的宽度为<code>1000-20-20 = 960</code></p></li><li><p>内部尺寸和流式特性</p><p>button按钮是CSS极具代表的inline-block元素,是展示”包裹性”最好的例子,具体表现为:按钮文字越多宽度越宽(内部尺寸特性),但文字足够多,在容器宽度处自动换行(自适应特性).</p><p>包裹性在实际开发中的用处: 页面某个模块文字内容是动态的,希望文字少的时候居中显示,文字多的时候居左显示.代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>width值作用的细节</p><p>CSS盒模型的组成模式有两种: 一种是border-box.即padding和border也被包含在width和height中的怪异下的盒模型,还有一种是content-box为标准模式下的盒模型.</p><p>给width属性赋一个值,该值作用在content上,且一旦设定width值,该元素就没有了流动性,所以提出”无宽度准则”,这样会更灵活,容错性更强.</p></li><li><p>CSS流体布局下的宽度分离原则(便于维护)</p><p>也就是CSS中的width属性不与其他影响宽度的padding/border/margin属性共存.width属性独占一层标签,而padding/border等属性利用流动性在内部自适应实现.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    .son&#123;</span><br><span class="line">        <span class="selector-tag">margin</span>: 0 20<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="相对简单单纯的height-auto"><a href="#相对简单单纯的height-auto" class="headerlink" title="相对简单单纯的height: auto"></a>相对简单单纯的height: auto</h4><p>CSS的默认流是水平方向的,宽度是稀缺的,高度是无限的,所以宽度的分配规则比较复杂,高度显得比较随意.</p><ul><li><p>关于height: 100%</p><p>对于width属性就算父元素的width是auto,其百分比值也是支持的.但是,对于height属性,如果父元素的height为auto,只要子元素在文档流中,其百分比的值就被忽略了.<strong>我们发现百分比高度值想要生效,其父级必须有一个可以生效的高度值.</strong></p><p>要明白其中的原因要先了解浏览器渲染的基本原理.首先下载文档内容,加载头部的样式资源,然后从上而下,自外而内的顺序渲染DOM内容.因此,当渲染到父元素的时候,子元素的width:100%;并没有渲染,宽度就是内容的宽度,等渲染到子元素时,父元素宽度已经固定,此时width:100%;就是父元素的宽度.宽度不够溢出就好了.overflow属性就是为此而生的.<strong>为什么宽度支持,高度不支持呢?</strong>规范中给出了答案,<strong>如果包含块的高度没有显式指定(即高度由内容决定),并且该元素不是绝对定位,则计算值为auto.一句话总结就是,高度没有显式指定则解释为auto,再和百分比计算结果为NaN</strong></p><p>想要他生效只有如下设置:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>max-width/height,min-width/height与width/height区别</p><p>width/height的默认值是auto,而min-width/height 的默认值是0,max-width/height的默认值是none.</p><p>他们三者也有一套相互覆盖的规则:<strong>超越!important,超越最大</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">style</span>=<span class="string">"width: 480px!important"</span>/&gt;</span></span><br><span class="line">img&#123;</span><br><span class="line">max-width: 260px;//max-width会覆盖width.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1400px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    //当min比max还要大的时候,遵循'超越最大'原则</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><p>​    inline和block是<strong>流式布局的本质所在</strong>.从作用上来讲,块级负责结构,内联负责内容.且内联元素设计的属性非常多,且往往具有继承属性.</p><p>​    从定义看,<strong>内联元素与<code>display:inline</code>不是一个概念</strong>.因为<code>display:inline-block;</code>与<code>display:inline-table;</code>也是内联元素,因为他们的外在盒子都是内联元素.</p><p>从表现上,<strong>内联元素的典型特征就是可以和文字显示在一行.</strong>因此,文字是内联元素,按钮也是内联元素,输入框下拉框都是.</p><h3 id="盒尺寸四大家族"><a href="#盒尺寸四大家族" class="headerlink" title="盒尺寸四大家族"></a>盒尺寸四大家族</h3><h4 id="深入理解content"><a href="#深入理解content" class="headerlink" title="深入理解content"></a>深入理解content</h4><ul><li><p>什么是替换元素?</p><p>根据”外在盒子”是内联还是块级,我们把元素分为内联元素和块级元素.而根据是否具有可替换内容我们把元素分为替换元素和非替换元素.举个例子,<code>&lt;img src=&quot;1.jpg&quot;&gt;</code>但我们把src换为<code>2.jpg</code>图片就会替换,这种通过修改某个属性值就可以被替换的元素称为”替换元素”.所以的替换元素都是内联水平元素.</p><p>替换元素有三种尺寸,分别为固有尺寸,HTML尺寸,CSS尺寸.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span>&gt;</span> /如果没有HTML尺寸和CSS尺寸,则使用固有尺寸即图片的尺寸/</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> <span class="attr">width</span>=<span class="string">"128"</span> <span class="attr">height</span>=<span class="string">"96"</span>&gt;</span> /如果没有CSS尺寸则使用HTML尺寸/</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span>&gt;</span></span><br><span class="line">img&#123;</span><br><span class="line">width:200px;</span><br><span class="line">height:100px;/如果有css尺寸则使用css尺寸/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS世界中的替换元素有一个很重要的特性,那就是’我们无法改变这个替换元素内容的固有尺寸’</strong>.那为什么我们设置width和height会影响图片尺寸呢?那是因为图片中的content替换内容的默认适配方式是”填充”,不管设置的尺寸有多大,就填充多大.在CSS3之前这种适配方式是不能修改的.CSS3我们可以通过<strong>object-fit属性修改该方式</strong>,例如<code>&lt;img&gt;</code>元素的默认声明是<code>object-fit:fill;</code>如果我们设置为<code>object-fit:none;</code>那么图片的尺寸就完全不受控制.如果我们设置为<code>object-fit: contain;</code>则图片保持比例尽可能的利用HTML的尺寸但又不会超出的方式显示.</p><p><strong>替换元素和非替换元素的区别主要在于src和content</strong>.</p></li><li><p>content生成辅助元素</p><p>实际项目中,content属性主要用于<code>::before</code>以及<code>::after</code>这两个伪元素中.此应用的核心点不在content上,而在伪元素上,所以我们通常会写<code>content:&#39;&#39;;</code> 生成辅助元素后再实现特定布局或实现图形效果.辅助元素最常用的应用是清除浮动.如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>content字符内容生成</p><p>content字符内容生成就是直接写入字符内容,中英文都可以,比较常见的就是配合@font-face规则实现图标字体效果.</p></li><li><p>content图片生成</p><p>content图片生成指的是直接使用url功能符显示图片.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">url</span>(1.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我们对于图片的宽高不好控制,无法改变图片的固有尺寸.所以我们通常使用background-image.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(1.jpg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>content计数器</p><p>主要是两个属性和一个方法.</p><p>counter-reset: 计数器名字   计数器的默认值;</p><p>counter-increment:  计数器名字 递增的值(省略的话默认是1);</p><p>方法:counter(name) 显示计数.</p><p>​</p></li></ul><h4 id="温和的padding属性"><a href="#温和的padding属性" class="headerlink" title="温和的padding属性"></a>温和的padding属性</h4><ul><li><p>padding和元素的尺寸</p><p>因为CSS默认的box-sizing是content-box,所以使用padding会影响元素的尺寸.但对于内联元素(不包括替换元素)而言,padding影响水平方向,而不影响垂直方向,这样的说法也不完全准确.由于内联元素没有可视宽度和可视高度的说法,垂直方向完全受line-height和vertical-align的影响,所以从视觉上来说,padding在垂直方向上没有起作用,但是我们给它加个背景色会发现其尺寸确实受到影响了.在实际开发中,我们可以在不影响布局的前提下,优雅的增加链接或按钮的点击区域大小.</p></li><li><p>padding的百分比取值</p><p>padding的值和margin值不同之处在于,padding的值不可以是负数.还有,<strong>padding的值如果是百分比,不论是水平方向还是垂直方向都是相对于宽度来说的.</strong></p></li><li><p>padding与图像绘制</p><p><strong>padding和background-clip属性配合可以在有限的标签下实现一些CSS绘制效果.</strong></p><p>比如如何用一个标签绘制”大队长”三道杠的分类图标效果.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    height: 10px;//中间的杠</span><br><span class="line">    <span class="selector-tag">padding</span>: 35<span class="selector-tag">px</span> 0;</span><br><span class="line">    border-top: 10px solid;//上面的杠</span><br><span class="line">    border-bottom: 10px solid;//下面的杠</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-tag">currentColor</span>;</span><br><span class="line">    <span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="激进的margin属性"><a href="#激进的margin属性" class="headerlink" title="激进的margin属性"></a>激进的margin属性</h4><ul><li><p>相关概念</p><p>元素尺寸: border + padding + content</p><p>元素内部尺寸: padding + content</p><p>元素外部尺寸: margin + border + padding + content</p></li></ul><ul><li><p>margin与元素尺寸以及相关布局</p><p><strong>一旦宽度设定,margin就无法改变元素尺寸.</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    margin: 0 -20px;//元素宽度还是100px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p><strong>只要元素的尺寸表现符合’充分利用可用空间’无论是垂直方向还是水平方向都可以通过margin改变尺寸.</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    margin: 0 -20px; //该元素空间为140px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正是这种具有流体特性下的改变尺寸特性,margin可以很方便的实现很多流体布局效果,比如说一侧定宽,一侧自适应.</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>margin的百分比值</p><p>和padding一样,margin的百分比值无论是水平方向还是垂直方向都是相对于宽度计算的.</p></li><li><p>margin的合并</p><p>块级元素的margin-top和margin-bottom通常会合并为一个margin.我们可以捕获两点重要信息,<strong>一是块级元素</strong>,二是<strong>垂直方向</strong>.</p><p>margin合并的计算规则:<strong>正正取大值,正负值相加,负负最负值.</strong></p></li><li><p>深入理解margin: auto;</p><p>我们首先要知道,有时候元素就算没有设置height和width,也会自动填充和自动填充对应的方位.假设一个外部的容器宽度是300px, 而内部的容器因为设置宽度为200px而导致原本应该自动填满的空间现在有100px闲置了,<code>margin: auto</code>就是为了填充这个闲置的尺寸的.<code>margin:auto;</code>的填充规则是: <strong>如果一侧定值,一侧auto,则auto为剩余的空间大小.如果两侧都是auto,则平分剩余空间.</strong></p><p>当我们想要某个块级元素右对齐时,脑子里不要就一个<code>float:right;</code>,很多时候<code>margin-left:auto;</code>才是最佳实践.浮动毕竟是个”魔鬼”,<strong>margin属性的auto计算就是为了块级元素左右对齐而设计的,和内联元素的text-align控制左右对齐相呼应.</strong></p><p>我们可能会发现<code>margin:auto;</code>并不能实现垂直居中,但是我们可以利用绝对定位实现这个需求.因为绝对定位后,top/bottom/left/right会自动填充,但又因为设置了宽高,导致多余的空间闲置,这时<code>margin:auto;</code>就可以计算空间了.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>: left:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    margin: auto;//实现垂直居中.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="功勋卓越的border属性"><a href="#功勋卓越的border属性" class="headerlink" title="功勋卓越的border属性"></a>功勋卓越的border属性</h4><ul><li><p>border与透明边框技巧</p><p><strong>优雅的增加点击区域大小.</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.click</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">11px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三角形图形绘制</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f30</span> transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内联元素与流"><a href="#内联元素与流" class="headerlink" title="内联元素与流"></a>内联元素与流</h3><h4 id="字母x是CSS中隐匿的举重若轻的角色"><a href="#字母x是CSS中隐匿的举重若轻的角色" class="headerlink" title="字母x是CSS中隐匿的举重若轻的角色"></a>字母x是CSS中隐匿的举重若轻的角色</h4><p>各种内联相关模型中,凡是涉及垂直方向的排版或是对齐的,都离不开最基本的基线.字母x下的下边缘就是基线.</p><p><code>vertical-align:middle;</code>并不是绝对的垂直居中对齐,这里的middle是基线往上1/2 x-height的高度,也就是字母x的交叉点的位置.所以middle得垂直居中只是一种近似效果.</p><p>字母X衍生了x-height(字母x的高度)的概念,并进一步衍生出了ex,ex是css中的一个尺寸单位,是一个相对单位,指的是小写字母x的高度.其实就是x-height.</p><h4 id="内联元素的基石-line-height"><a href="#内联元素的基石-line-height" class="headerlink" title="内联元素的基石 line-height"></a>内联元素的基石 line-height</h4><p>思考下面的问题,一个默认的空div高度是0,里面写上几个文字后高度就有了,这个高度从何而来?</p><p>不少人认为是由文字把内容撑开的,但本质上是由line-height属性所决定的,对于文本这样的纯内联元素,line-height就是高度计算的基石.</p><p>为什么line-height可以让内联元素垂直居中?这是一个误区,要想让单行文字垂直居中只要设置line-height大小就可以了,和height没有任何关系.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title2</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行文本和替换元素的垂直居中和单行文本不一样, 需要用到vertical-align:middle的帮助.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>line-height的值一般为固定长度值,也可以是数值和是百分比,两者的值都是与font-size相乘后的值.</p><p><strong>内联元素的大值特性:无论内联元素的line-height如何设置,最终父级元素的高度都是由数值最大的那个line-height所决定的.</strong></p><h4 id="line-height的好朋友vertical-align"><a href="#line-height的好朋友vertical-align" class="headerlink" title="line-height的好朋友vertical-align"></a>line-height的好朋友vertical-align</h4><p>为什么说他们是好朋友呢,因为凡是line-height起作用的地方vertical-align也一定起作用.因为vertical-align的默认值是baseline基线对齐,而基线的定义是x的下边缘.它等同于<code>vertical-align:0;</code></p><p>####基于vertical-align属性的水平垂直居中大小不固定弹框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">bottom</span>:<span class="number">0</span>;<span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowarp;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dialog</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">    <span class="attribute">text-align</span>:left;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowarp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流的破坏与保护"><a href="#流的破坏与保护" class="headerlink" title="流的破坏与保护"></a>流的破坏与保护</h3><h4 id="魔鬼属性float"><a href="#魔鬼属性float" class="headerlink" title="魔鬼属性float"></a>魔鬼属性float</h4><p>浮动的本质就是为了实现文字环绕效果,这种文字环绕主要指文字环绕图片的显示效果.理论上可以通过float把整个页面结构都弄出来,但这种方式太脆弱缺乏弹性.一旦某个元素宽高发生变化,就会发生布局错位.</p><p>float的特性:</p><ol><li><p>包裹性</p><p>假设浮动元素的父元素width为200px,浮动元素子元素是一个宽度为128px的图片,此时元素宽度表现为”包裹”,就是里面图片的宽度128px;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    .float&#123;</span><br><span class="line">        float: left;//该元素宽度为128px;</span><br><span class="line">        <span class="selector-tag">img</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">128px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果浮动元素的子元素不止是一张图片,还有许多文字,就会出现”自适应性”,此时浮动元素的宽度为父元素的宽度200px;</strong></p></li><li><p>块状化并格式化上下文</p><p>块状化即float的值只要不是none,其display就会成为block或table.</p></li><li><p>破坏文档流</p></li><li><p>没有任何margin合并</p></li></ol><h4 id="float的作用机制"><a href="#float的作用机制" class="headerlink" title="float的作用机制"></a>float的作用机制</h4><p>float的最著名的特性表现就是会让父元素的高度塌陷.但只要父元素设置了一个具体的值就不需要担心高度塌陷的问题了.但不建议这样做,比较稳妥的做法还是采用一些手段清除浮动带来的影响.</p><h4 id="float与流体布局"><a href="#float与流体布局" class="headerlink" title="float与流体布局"></a>float与流体布局</h4><p>我们可以利用float破坏css正常流的特性,实现两栏或多栏的自适应布局.</p><p>一侧定宽,一侧自适应布局.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    width:100px;//不定宽可以设置为百分比</span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line">    <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    margin-left: 100px;//不定宽可以设置为百分比</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="float的天然克星clear"><a href="#float的天然克星clear" class="headerlink" title="float的天然克星clear"></a>float的天然克星clear</h4><p>其语法如下: clear : none | left | right | both;</p><p>clear属性本质上并不是清除浮动,而是让自身不能和浮动元素相邻,但clear属性只对块级元素有效.这也就是我们在借助::after等伪元素(内联)清除浮动时需要设置display的原因.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CSS的结界-BFC"><a href="#CSS的结界-BFC" class="headerlink" title="CSS的结界-BFC"></a>CSS的结界-BFC</h4><p>BFC全称 block formatting context,中文为”块级格式化上下文”.</p><p>它的表现原则为: 如果一个元素具有BFC,内部子元素再怎么样也不会影响外部的元素,所以BFC不可能发生margin重叠的.BFC也可以用来清除浮动的影响,因为不清除浮动会影响后面的布局和定位.</p><p><strong>什么时候会触发BFC呢?</strong></p><ol><li><code>&lt;html&gt;</code>根元素</li><li>float的值不为none;</li><li>overflow的值为auto, scroll 或 hidden;</li><li>display 的值为: inline-block,table-cell,table-caption中的任何一个;</li><li>position的值不为static和relative;</li></ol><p>只要元素符合上面的任何一个条件就无需使用<code>clear:both;</code>去清除浮动的影响了.</p><h4 id="最佳结界overflow"><a href="#最佳结界overflow" class="headerlink" title="最佳结界overflow"></a>最佳结界overflow</h4><p>要想彻底清除浮动的影响,最适合的属性不是clear而是overflow.一般使用<code>overflow:hidden;</code></p><p>HTML中有两个标签是可以默认产生进度条的,一个是根元素<code>&lt;html&gt;</code>,另一个是文本域<code>&lt;textarea&gt;</code>,之所以出现滚动条是因为这两个标签的overflow的默认值不是visible.</p><p>滚动条是可以自定义的.支持-webkit-前缀的浏览器可以这样设置.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;<span class="comment">/*血槽宽度*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.3);<span class="comment">/*拖动条*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;<span class="comment">/*背景槽*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>overflow与锚点定位</strong>:锚点就是可以让页面定位到某个位置的点,本质上是通过改变容器滚动高度或者宽度来实现的.设置了overflow属性为auto,scroll,hidden的元素是可以滚动的,<code>overflow:hidden</code>与scroll 和 auto的区别就在于有没有那个滚动条.<strong>高度溢出,滚动依旧存在,只是滚动条不存在</strong>,牢记这一点可以让我们更简单更原生的方式实现一些交互效果.</p><h3 id="CSS世界的层叠规则"><a href="#CSS世界的层叠规则" class="headerlink" title="CSS世界的层叠规则"></a>CSS世界的层叠规则</h3><p>在css中,z-index属性只有和定位元素(position不为static的元素)在一起的时候才有用,可以是正数也可以是负数.但随着css3到来,flex盒子也可以使用z-index属性.</p><p>CSS层叠顺序类型如下:(由低到高) </p><p><strong>层叠上下文background/border -&gt; 负z-index -&gt; block盒子 -&gt; float浮动盒子 -&gt; inline水平盒子 -&gt; z-index: auto或0 -&gt; 正z-index.</strong></p><p>CSS3新时代的层叠上下文:</p><ol><li>元素为flex布局的元素.</li><li>元素opacity不是1</li><li>元素的transform不是none</li><li>元素mix-blend-mode不是 normal</li><li>元素isolation是isolate</li><li>元素will-change属性为上面2-6的任意一个</li><li>元素filter不是none</li><li>元素的-webkit-overflow-scrolling为touch</li></ol><p><strong>z-index”不犯二”准则</strong>:对于非浮层元素,避免设置z-index的值,z-index的值没有任何道理需要超过2.</p><h3 id="强大的文本处理能力"><a href="#强大的文本处理能力" class="headerlink" title="强大的文本处理能力"></a>强大的文本处理能力</h3><h4 id="font-size的能力"><a href="#font-size的能力" class="headerlink" title="font-size的能力"></a>font-size的能力</h4><p>line-height的部分类别属性是相对于font-size计算的,而vertical-align百分比属性值又是相对于line-height计算的.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: -<span class="number">25%</span>; <span class="comment">/* (即16px * 1.5 * -25% = -6px) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>font-size与ex,em,和rem的关系</strong>: ex是字符x的高度,font-size越大,对应的ex越大.em是根据当前元素的font-size计算的,而rem( root-em )是相对于HTML根元素的font-size进行计算的.</p><p><strong>桌面Chrome浏览器有一个12px的字号限制</strong>但并不是所有小于12px的字号都当做12px处理,有一个值例外那就是0.</p><p><strong>如果font-size:0;那么文字就会被直接隐藏掉</strong>.不然哪怕是0.00001px也会被当做12px处理.</p><p>font-weight表示文字的粗细程度,我们通常设置为bold 和 normal.也可以设置为100-900,该值必须是整百数.其中400等同于normal,700等同于bold.</p><p>font属性联写: [font-style] ? font-size [/line-height].例如<code>.font{ font: normal 700 14px/20px }</code></p><h4 id="了解-font-face"><a href="#了解-font-face" class="headerlink" title="了解@font face"></a>了解@font face</h4><p>@font face 本质上就是一个定义字体和字体集的变量.这个变量不仅仅是简单的自定义字体,还包括字体重命名,默认字体样式设置.它大多用于字体图标技术.所谓字体本质上就是字符集和图形的一种映射关系.字体图标技术通常把字符映射成另外的图标形状,我们看到的图标,本质上就是一个普通的字符.</p><h4 id="文本的控制"><a href="#文本的控制" class="headerlink" title="文本的控制"></a>文本的控制</h4><p>text-indent就是对文本进行缩进控制.项目中我们用的最多的就是给text-indent一个很大的负值来隐藏文本内容.比如很多网站的LOGO放在<code>&lt;h1&gt;</code>中,然后设置一个很大的负值,比如-9999em.</p><p>letter-spacing用来控制与字符的间距.这里的字符包括英文字母,汉字以及空格.支持负值.</p><p>word-spacing用来控制与单词间的间距.<strong>它仅作用于空格而不是字面上的单词</strong>.</p><p>white-space 声明了如何处理元素内的空白字符,normal为合并,pre为不合并,只有在换行符的地方换行.nowrap合并空白但不允许文字环绕.当设置为nowrap时,元素的宽度此时表现为”最大可用宽度”,换行符和一些空格全部合并,文本在一行显示.</p><p><strong>如何解决text-decoration下划线和字体重叠的问题?</strong>可以用兼容性并不好的text-decoration-skip属性,或用box-shadow或background-image模拟,然而最好的解决方式是看似普通却很有用的border属性.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>text-transform是专门为英文字符设计的,要么全部大写<code>text-transform: uppercase</code>,要么全部小写<code>text-transform: lowercase</code>,身份证号的x输入以及验证码的字母大小写都可以使用这个属性实现需求.</p><h3 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h3><ul><li><p>display:none;</p><p>display:none;可以让元素以及所有后代元素都隐藏,占据的空间消失,是真正意义上的隐藏.</p><p>在火狐浏览器下display:none的元素的background-image是不加载的,但是chrome和safari视情况而定,父元素隐藏图片不加载,自身元素隐藏,图片依旧会加载.</p></li><li><p>visibility:hidden;</p><p>与display:none一样可以隐藏元素,但visibility:hidden;保留元素的空间.但他和display:none不一样的是,它具有继承性,父元素设置visibility:hidden;子元素也会看不到,一旦子元素设置visibility:visible;子元素就会显示出来这种后代可见特性在开发中非常有用.</p><p><strong>visibility可以喝transition配合使用,而display不能和transition配合,因为transition的属性有visibility而没有display.</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.list</span>&#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">    <span class="attribute">transition</span>: visibility <span class="number">0s</span> .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>希望元素不可见,不能点击,不占空间,但键盘可访问可以使用<strong>clip: rect(0 0 0 0 )</strong>剪切隐藏.</p></li><li><p>希望元素不可见,不能点击,但占据空间且键盘可访问使用<strong>relative配合负z-index隐藏</strong></p></li><li><p>希望元素不可见,但可以点击,不占空间可以使用<strong>opacity:0;</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在看张鑫旭的&lt;code&gt;&amp;lt;&amp;lt;CSS世界&amp;gt;&amp;gt;&lt;/code&gt;,对里面说的一些干货做了点总结,如果希望看到更多知识,请自行购买.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; clas
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css 前端" scheme="http://yoursite.com/tags/css-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2017前端技术发展回顾</title>
    <link href="http://yoursite.com/2018/03/12/2017%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://yoursite.com/2018/03/12/2017前端技术发展回顾/</id>
    <published>2018-03-12T08:39:32.000Z</published>
    <updated>2018-03-12T08:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>HTML 5.2 <a href="https://www.w3.org/blog/2017/12/html-5-2-is-done-html-5-3-is-coming/" target="_blank" rel="external">发布</a></li><li>毫无疑问,这是<a href="https://vuejs.org/" target="_blank" rel="external">Vue.js</a>在流行中飞速发展的一年.</li><li>前端HTML &amp; CSS 开发者和前端应用程序开发者之间的巨大差别终于被认知,并重新定义.</li><li>作为使用web技术构建应用程序的前端 JavaScript开发者变得越来越好,也<a href="https://link.juejin.im/?target=https%3A%2F%2Fblog.logrocket.com%2Fthe-increasing-nature-of-frontend-complexity-b73c784c09ae" target="_blank" rel="external">越来越糟</a>.</li><li>今年似乎比往年更多的涌现出一批试图与主流 JavaScript 应用工具（<a href="https://link.juejin.im?target=https%3A%2F%2Fstateofjs.com%2F2017%2Ffront-end%2Fresults" target="_blank" rel="external">React，Angular，Vue 等</a>）相抗衡的应用程序/框架解决方案。我来列举一部分，<a href="https://link.juejin.im?target=http%3A%2F%2Fmoonjs.ga%2Fdocs%2Foverview.html" target="_blank" rel="external">Moon</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fmarkojs.com%2F" target="_blank" rel="external">Marko</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fhyperapp%2Fhyperapp" target="_blank" rel="external">Hyperapp</a>，<a href="https://link.juejin.im?target=http%3A%2F%2Fquasar-framework.org%2F" target="_blank" rel="external">Quasar Framework</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fpoi.js.org" target="_blank" rel="external">POI</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Ffrint.js.org%2F" target="_blank" rel="external">frint</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fbunnyjs.com%2F" target="_blank" rel="external">BunnyJS</a>，<a href="https://link.juejin.im?target=http%3A%2F%2Fjsblocks.com%2F" target="_blank" rel="external">jsblocks</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fsapper.svelte.technology%2F" target="_blank" rel="external">Sapper</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fstimulusjs%2Fstimulus" target="_blank" rel="external">Stimulus</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fchoojs%2Fchoo" target="_blank" rel="external">Choo</a>…</li><li>jsbin 和 jsfiddle 进化成了 <a href="https://link.juejin.im?target=https%3A%2F%2Fstackblitz.com%2F" target="_blank" rel="external">StackBliz</a> 和 <a href="https://link.juejin.im?target=https%3A%2F%2Fcodesandbox.io%2F" target="_blank" rel="external">codeSandbox</a> 的样子，它们让分享一个应用程序变得如此简单</li><li>React 继续被 <a href="https://link.juejin.im?target=https%3A%2F%2Fpreactjs.com%2F" target="_blank" rel="external">preact</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Finfernojs.org%2F" target="_blank" rel="external">inferno</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FNervJS%2Fnerv" target="_blank" rel="external">nerv</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fdvajs%2Fdva" target="_blank" rel="external">dva</a> 和 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Falibaba%2Frax" target="_blank" rel="external">rax</a> 之类的所追捧。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fdevhints.io%2F" target="_blank" rel="external">devhints.io</a> 很好地将 cheatsheets 组织了起来。</li><li>我们发现应用程序的样板或者命令行工具是带有偏见的，例如 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffacebookincubator%2Fcreate-react-app" target="_blank" rel="external">React Create App</a>，必要的时候我们要从中逃离。</li><li>大多数开发人员发现，一个好的<a href="https://link.juejin.im?target=https%3A%2F%2Fcode.visualstudio.com%2F" target="_blank" rel="external">代码编辑器</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Feslint.org%2F" target="_blank" rel="external">eslint </a>以及 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fprettier%2Fprettier" target="_blank" rel="external">prettier</a> 的组合使写代码这件事更快，更轻松愉快.</li><li>CSS <a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FCSS_Flexible_Box_Layout%2FBasic_Concepts_of_Flexbox" target="_blank" rel="external">Flexbox</a> 和 <a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2FCSS_Grid_Layout" target="_blank" rel="external">Grid</a> 获得浏览器支持，因此越来越多开发者开始关注这两者。</li><li>我们<a href="https://link.juejin.im?target=https%3A%2F%2Fblog.chromium.org%2F2017%2F05%2Fchrome-59-beta-headless-chromium-native.html" target="_blank" rel="external">终于</a>有<a href="https://link.juejin.im?target=https%3A%2F%2Fchromium.googlesource.com%2Fchromium%2Fsrc%2F%2B%2Flkgr%2Fheadless%2FREADME.md" target="_blank" rel="external">无头的 Chrome</a> 了。</li><li>你不再需要用 Less 或者 Sass 来<a href="https://link.juejin.im?target=https%3A%2F%2Fshoelace.style" target="_blank" rel="external">使用 CSS</a> 来完成<a href="https://link.juejin.im?target=http%3A%2F%2Fcssnext.io%2Ffeatures%2F" target="_blank" rel="external">令人惊叹的事情</a>了。</li><li>CSS <a href="https://link.juejin.im?target=http%3A%2F%2Fryanogles.by%2Fcss%2Fjavascript%2F2017%2F05%2F25%2Fthe-state-of-css.html" target="_blank" rel="external">革命</a>正在进行中。</li><li>JavaScript 对象浏览工具已经到来，<a href="https://link.juejin.im?target=https%3A%2F%2Fsdras.github.io%2Farray-explorer%2F" target="_blank" rel="external">JavaScript Array Explorer</a>和 <a href="https://link.juejin.im?target=https%3A%2F%2Fsdras.github.io%2Fobject-explorer%2F" target="_blank" rel="external">JavaScript Object Explorer</a>，它们对于学习 JavaScript 数据类似（例如对象）是非常方便有用的。</li><li><a href="https://link.juejin.im?target=http%3A%2F%2Fgs.statcounter.com%2Fbrowser-market-share" target="_blank" rel="external">Chrome 浏览器在市场上占据主导地位</a>，人们开始担心<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.theverge.com%2F2018%2F1%2F4%2F16805216%2Fgoogle-chrome-only-sites-internet-explorer-6-web-standards" target="_blank" rel="external">历史可能会重演</a>。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fbrave.com%2F" target="_blank" rel="external">Brave</a> 成为浏览互联网最愉快且安全的方式。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2017%2F04%2FPhantomjs-future-uncertain" target="_blank" rel="external">PhantomJS 不再维护</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fchromium.googlesource.com%2Fchromium%2Fsrc%2F%2B%2Flkgr%2Fheadless%2FREADME.md" target="_blank" rel="external">Headless Chrome</a> 和 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FGoogleChrome%2Fpuppeteer" target="_blank" rel="external">Puppeteer</a> 进入。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fprettier.io%2F" target="_blank" rel="external">Prettier</a> 从一个意想不到的地方开始，却成为了一个主角。</li><li>很多开发者开始采用静态检查，主要是出于主观原因和赶时髦。有些人完全遵从了 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FMicrosoft%2FTypeScript" target="_blank" rel="external">Typescript</a> 和微软的做事方式，也有些人采取的较慢的 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fflow" target="_blank" rel="external">Flow</a>。有一点可以肯定，大多数开发者不需要类型，他们只是把已经复杂的问题和解决方法更加复杂化。像大多数事情一样，这种趋势大部分是主观教条而非客观价值。</li><li>Web 组件仍然潜伏着，等待着开发人员的大力推动，这可能永远不会发生。</li><li>JavaScript 安定了，<a href="https://link.juejin.im?target=http%3A%2F%2Fmichelebertoli.github.io%2Fcss-in-js%2F" target="_blank" rel="external">CSS 爆发了</a>，明年的这个时候所有人都会疲惫不堪。</li><li>许多人在使用组件树构建应用程序的时候，开始将 CSS <a href="https://link.juejin.im?target=https%3A%2F%2Fspeakerdeck.com%2Fvjeux%2Freact-css-in-js" target="_blank" rel="external">转移</a>到 <a href="https://link.juejin.im?target=https%3A%2F%2Flevelup.gitconnected.com%2Fa-brief-history-of-css-in-js-how-we-got-here-and-where-were-going-ea6261c19f04" target="_blank" rel="external">JS 中的 CSS</a> 里。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fyarnpkg.com%2Fen%2F" target="_blank" rel="external">Yarn</a> 似乎满足了需求，因为很多人从 npm 换成 Yarn。然而，Yarn 最大的价值在于它为 npm 带来竞争，从而使得 npm 变得更好。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fscrimba.com%2Fabout" target="_blank" rel="external">Scrimba</a> 将用于交互式的编码屏幕录像（录制现场的编辑器是可编辑的）的新的视频格式成为现实。</li><li>大多数人开始意识到<a href="https://link.juejin.im?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FComponent-based_software_engineering" target="_blank" rel="external">组件架构</a>和<a href="https://link.juejin.im?target=http%3A%2F%2Fpatternlab.io%2F" target="_blank" rel="external">原子化设计</a>之间的关联。</li><li>ES 模块<a href="https://link.juejin.im?target=https%3A%2F%2Fphilipwalton.com%2Farticles%2Fdeploying-es2015-code-in-production-today%2F" target="_blank" rel="external">将</a>成为<a href="https://link.juejin.im?target=https%3A%2F%2Fcaniuse.com%2F%23feat%3Des6-module" target="_blank" rel="external">浏览器</a>的<a href="https://link.juejin.im?target=https%3A%2F%2Fmedium.com%2Fdev-channel%2Fes6-modules-in-chrome-canary-m60-ba588dfb8ab7" target="_blank" rel="external">一部分</a>，并且如果使用 ES 模块，<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FWebReflection%2Fecma" target="_blank" rel="external">备用计划</a>将是必需的（即来自 webpack 之类的打包文件）。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fcodeburst.io%2Fjavascript-trends-in-2018-3fb0077259" target="_blank" rel="external">MVC 框架正在淡出</a>。</li><li>使用<a href="https://link.juejin.im?target=http%3A%2F%2Fbluekit.blueberry.io%2F" target="_blank" rel="external">Bluekit</a>，<a href="https://link.juejin.im?target=https%3A%2F%2Fstorybook.js.org%2F" target="_blank" rel="external">Storybook</a>，<a href="https://link.juejin.im?target=Styleguidist" target="_blank" rel="external">React Styleguidist</a> 和 <a href="https://link.juejin.im?target=https%3A%2F%2Fbitsrc.io%2F" target="_blank" rel="external">bit</a> 之类的工具，在你的应用程序之外开发和展示 React 组件开始变得流行。</li><li>在 2017 年获得前端工作<a href="https://link.juejin.im?target=https%3A%2F%2Fresearch.hackerrank.com%2Fdeveloper-skills%2F2018%2F" target="_blank" rel="external">有关经验，这是从个人项目以及 Github 账号上展示出来的</a>。</li><li>从 HTML 文档中<a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTML%2FPreloading_content" target="_blank" rel="external">预加载</a>资源（CSS，JavaScript，多媒体文件等）<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.w3.org%2FTR%2Fpreload%2F" target="_blank" rel="external">到来了</a>。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cypress.io%2Fhow-it-works%2F" target="_blank" rel="external">Cypress</a> 作为一个完整的测试解决方案出现了，测试会越来越好，因为对于应用程序的代码，端到端测试才是重点。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.mozilla.org%2Fblog%2F2017%2F11%2F13%2Fwebassembly-in-browsers%2F" target="_blank" rel="external">WebAssembly 现在可以总所有主流浏览器中使用了。</a></li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwebpack.js.org%2F" target="_blank" rel="external">Webpack</a> 占主导地位，然后<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fparcel-bundler%2Fparcel" target="_blank" rel="external">竞争对手 parcel</a> 出现了。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Freactjs.org%2Fblog%2F2017%2F09%2F26%2Freact-v16.0.html" target="_blank" rel="external">React 16 代号 fiber 发布</a>。</li><li>在某些情况下，React 开始与 jQuery 一较高下了.</li><li>React <a href="https://link.juejin.im?target=https%3A%2F%2Ftwitter.com%2Fnpmjs%2Fstatus%2F949017852702543876" target="_blank" rel="external">的确</a>成为了<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fnpm%2Fstate-of-javascript-frameworks-2017-part-1" target="_blank" rel="external">最多人使用</a>的<a href="https://link.juejin.im?target=https%3A%2F%2Fstackoverflow.blog%2F2018%2F01%2F11%2Fbrutal-lifecycle-javascript-frameworks%2F" target="_blank" rel="external">构建 UI</a> 的工具.</li><li>Facebook <a href="https://link.juejin.im?target=https%3A%2F%2Fcode.facebook.com%2Fposts%2F300798627056246%2Frelicensing-react-jest-flow-and-immutable-js%2F" target="_blank" rel="external">放弃了 React 的 BSD 许可证</a>，而转成了 MIT 许可证（同样包括 Jest，Flow，Immutable.js 和 GraphQL）。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.graphql.com%2Fcase-studies%2F" target="_blank" rel="external">2017</a> 年 <a href="https://link.juejin.im?target=https%3A%2F%2Fdev-blog.apollodata.com%2F2017-the-year-in-graphql-124a050d04c6" target="_blank" rel="external">GraphQL</a> 开始<a href="https://link.juejin.im?target=https%3A%2F%2Fgraphcms.com%2F" target="_blank" rel="external">流行起来</a>。</li><li>Facebook 继续领头<a href="https://link.juejin.im?target=https%3A%2F%2Fcode.facebook.com%2Fprojects%2F" target="_blank" rel="external">负责开发</a>即将到来的如 <a href="https://link.juejin.im?target=https%3A%2F%2Fprepack.io%2F" target="_blank" rel="external">prepack.io</a> 之类的工具。</li><li>正如期待，<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.ecma-international.org%2Fpublications%2Fstandards%2FEcma-262.htm" target="_blank" rel="external">ECMA-262 第 8 版也就是 ES2017 发布</a>。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Freacttraining.com%2Freact-router%2F" target="_blank" rel="external">React Router</a> 终于稳定下来了。</li><li>所有的现代浏览器现在都支持 <a href="https://link.juejin.im?target=http%3A%2F%2Fkangax.github.io%2Fcompat-table%2Fes6%2F" target="_blank" rel="external">ECMAScript 2015（也就是 ES6）</a>。</li><li><a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync_function" target="_blank" rel="external">Async JavaScript 函数</a> 开始获得一些认真的关注及使用，主要是因为所有现在浏览器<a href="https://link.juejin.im?target=https%3A%2F%2Fcaniuse.com%2F%23search%3Dasync%2520fun" target="_blank" rel="external">现在都支持 Async 函数</a>了。</li><li>移动开发，<a href="https://link.juejin.im?target=https%3A%2F%2Fflutter.io%2F" target="_blank" rel="external">仍然</a><a href="https://link.juejin.im?target=https%3A%2F%2Ffacebook.github.io%2Freact-native%2F" target="_blank" rel="external">很</a><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.nativescript.org%2F" target="_blank" rel="external">难</a>。今年，强烈地倡导 <a href="https://link.juejin.im?target=https%3A%2F%2Fblog.mozilla.org%2Ffirefox%2Fprogressive-web-apps-whats-big-deal%2F" target="_blank" rel="external">web 平台作为解决这一痛苦的方案</a>获得了<a href="https://link.juejin.im?target=https%3A%2F%2Fjoreteg.com%2Fblog%2Fbetting-on-the-web" target="_blank" rel="external">大量的支持</a>。</li></ul><p>原文地址：<a href="https://github.com/FrontendMasters/front-end-handbook-2018/blob/master/recap.md" target="_blank" rel="external">Recap of Front-end Development in 2017</a><br>原文作者：FrontendMasters<br>译文出自：掘金翻译计划<br>本文永久链接：<a href="https://github.com/xitu/front-end-handbook-2018/blob/zh-Hans/recap.md" target="_blank" rel="external">点击</a><br>译者：bambooom<br>校对者：realYukiko</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;HTML 5.2 &lt;a href=&quot;https://www.w3.org/blog/2017/12/html-5-2-is-done-html-5-3-is-coming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发布&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 技术 回顾" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-%E6%8A%80%E6%9C%AF-%E5%9B%9E%E9%A1%BE/"/>
    
  </entry>
  
  <entry>
    <title>学习CSS Grid布局</title>
    <link href="http://yoursite.com/2017/12/13/%E5%AD%A6%E4%B9%A0CSS-Grid%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/12/13/学习CSS-Grid布局/</id>
    <published>2017-12-13T07:39:20.000Z</published>
    <updated>2017-12-13T07:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSS Grid 布局是CSS中最强大的布局系统,与flexbox的一维布局系统不同,CSS Grid是一个二维布局系统,它可以同时处理行和列.</p></blockquote><h3 id="第一个Grid布局"><a href="#第一个Grid布局" class="headerlink" title="第一个Grid布局"></a>第一个Grid布局</h3><p>css Grid布局由两个核心组成部分,warpper(父元素)和items(子元素).warpper是实际的grid(网格),items是网格的内容.</p><p>下面是一个warpper元素,内部包含了6个items:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warpper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要把warpper元素变成一个grid(网格),只需要把它的<code>display</code>属性设置为<code>grid</code>即可.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warpper</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们还没有写任何样式,他会简单的将6个div堆叠在一起.</p><h3 id="Columns-列-和rows-行"><a href="#Columns-列-和rows-行" class="headerlink" title="Columns(列)和rows(行)"></a>Columns(列)和rows(行)</h3><p>为了使其成为二维的网格容器,我们需要定义行和列.让我们创建两行三列,使用<code>grid-template-cloumns</code>和<code>grid-template-rows</code>属性.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warpper</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-cloumns</span>: <span class="number">100px</span> <span class="number">80px</span> <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们为<code>grid-template-cloumns</code>写入了3个值,这样我们就得到了3列,每列的值代表列的宽度.而<code>grid-template-rows</code>代表行数及行的高度.</p><h3 id="放置items-子元素"><a href="#放置items-子元素" class="headerlink" title="放置items(子元素)"></a>放置items(子元素)</h3><p>为了帮助理解,我们在每个items(子元素)加上单独的class.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warpper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们来创建一个 3*3的grid:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warpper</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-cloumns</span>:<span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只在页面上看到3-2的grid,而我们定义的是3-3的grid.这是因为我们只有6个items来填充这个网格.我们我们再追加3个items,name最后一行也会被填满.</p><p>要定位和调整items大小,可以使用grid-cloumn和grid-row属性来设置.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">  <span class="attribute">grid-cloumn-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-cloumn-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的样式表示,我们希望item1占据从第一个网格线开始,到第四条网格线结束.换句话说它将独占一行.而剩下的items都推到了下一行.</p><p>这种形式也可以缩写为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">  <span class="attribute">grid-cloumn</span>: <span class="number">1</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span>&#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><ol><li>网格容器(Grid):应用<code>display:grid</code>的元素,items的直接父级元素.</li><li>网格项(items): 网格容器的直接子元素,后代元素不是.</li><li>网格线(Grid-line):构成网格结构的分界线.</li><li>网格轨道(Grid-Track):两条相邻网格线之间的空间.</li><li>网格单元格(Grid-cell):两个相邻行与相邻列之间的空间.</li><li>网格区域(Grid-Area):四条网格线包围的总空间.</li></ol><h3 id="父元素-网格容器属性"><a href="#父元素-网格容器属性" class="headerlink" title="父元素 网格容器属性"></a>父元素 网格容器属性</h3><h5 id="display"><a href="#display" class="headerlink" title="display"></a>display</h5><p>将元素定义为网格容器,并为其建立新的网格式上下文.</p><ul><li>grid : 生成一个块级网格</li><li>inline-grid: 生成一个内联网格</li><li>subgrid: 嵌套的子网格.</li></ul><p><strong>在网格容器中使用float,clear,column,vertical-align不会产生任何效果.</strong></p><h5 id="grid-template-cloumns-rows"><a href="#grid-template-cloumns-rows" class="headerlink" title="grid-template-cloumns/rows"></a>grid-template-cloumns/rows</h5><p>使用空格分割值列表,用来定义网格的行和列.可以是长度值和百分比,和自动分配(auto)或网格线名称<line-name>.</line-name></p><h5 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h5><p>指定Grid Area名称来定义网格模板.一个<code>.</code>号代表一个空的单元.你可以使用任意数量的<code>.</code>只要这些<code>.</code>之间没有空隙隔开就表示一个个的单元格.</p><ul><li><grid-area-name>:由items的grid-area指定的区域名称</grid-area-name></li><li>.(点号):代表一个空网格单元</li><li>none:不定义网格区域</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>:auto;</span><br><span class="line">  <span class="attribute">grid-template-cloumns</span>:<span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">"header header header"</span></span><br><span class="line">    <span class="string">"main main . sidebar"</span></span><br><span class="line">    <span class="string">"footer footer footer footer"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>:header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>:main;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当你命名网格区域后,该区域两端的网格线实际上是自动命名的,如果你的网格区域名字是foo,则起始行网格线和列网格线是foo-statrt,最后的网格线是foo-end.则意味着一个网格线可能有很多名称.</p><h5 id="grid-template"><a href="#grid-template" class="headerlink" title="grid-template"></a>grid-template</h5><p>用于定义<code>grid-template-rows</code>,<code>grid-template-cloumns</code>,和<code>grid-template-areas</code>的缩写.</p><ul><li>none:将所有的属性设置为初始值.</li><li>subgrid:将rows和cloumns设置为subgrid,areas设置为初始值.</li><li><grid-template-rows>/<grid-template-cloumns>:将rows和cloumns设置为特定值,areas为none.</grid-template-cloumns></grid-template-rows></li></ul><h5 id="grid-column-gap-grid-row-gap"><a href="#grid-column-gap-grid-row-gap" class="headerlink" title="grid-column-gap/grid-row-gap"></a>grid-column-gap/grid-row-gap</h5><p>指定网格线的大小,可以把它想象为设置列/行之间间距的宽度.值为长度值.</p><h5 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h5><p>grid-column-gap/grid-row-gap的缩写语法</p><h5 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h5><p>网格容器的水平对其方式,这些行为也可以通过items的justify-self属性设置:</p><ul><li>start 左侧对其</li><li>end 右侧对其</li><li>center 居中对齐</li><li>stretch 填满区域宽度</li></ul><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h5><p>网格容器的垂直对齐方式:</p><ul><li>start 顶部对齐</li><li>end 底部对齐</li><li>center 垂直居中</li><li>stretch 填满区域高度</li></ul><h5 id="justify-content-align-content"><a href="#justify-content-align-content" class="headerlink" title="justify-content/align-content"></a>justify-content/align-content</h5><p>有时,网格容器的内容小于整体容器的大小,可以设置内容在容器中的对齐方式.</p><ul><li>start 左对齐</li><li>end 右对齐</li><li>center 居中</li><li>stretch 填充</li><li>space-around 左右两边都有空间,空格之间距离相等</li><li>space-between 左右两边没有空间,空格之间距离相等</li><li>space-evenly 左右和每个空间距离相等</li></ul><h5 id="grid-auto-columns-grid-auto-rows"><a href="#grid-auto-columns-grid-auto-rows" class="headerlink" title="grid-auto-columns/grid-auto-rows"></a>grid-auto-columns/grid-auto-rows</h5><p>指定自动生成隐式网格轨道,但定义行和列自动超出网格范围时,隐式网格轨道创建.值为长度,百分比等等.</p><h5 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h5><p>如果你有一些未明确放置的网格,自动放置算法会自动放置这些项.</p><ul><li>row: 依次填充每行</li><li>column:依次填充每列</li><li>dense: 出现较小的网格项时,尝试填充网格中较早的空缺.但它可能导致你的网格项出现混乱.</li></ul><h3 id="子元素-网格项items属性"><a href="#子元素-网格项items属性" class="headerlink" title="子元素 网格项items属性"></a>子元素 网格项items属性</h3><h5 id="grid-column-start-end"><a href="#grid-column-start-end" class="headerlink" title="grid-column-start/end"></a>grid-column-start/end</h5><p>通过指定网格线来确定网格在容器中的列的起始位置</p><h5 id="grid-row-start-end"><a href="#grid-row-start-end" class="headerlink" title="grid-row-start/end"></a>grid-row-start/end</h5><p>通过指定网格线来确定网格在容器中的行的起始位置</p><h5 id="grid-column-grid-row"><a href="#grid-column-grid-row" class="headerlink" title="grid-column/grid-row"></a>grid-column/grid-row</h5><p>上面两者的缩写</p><h5 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h5><p>为网格项提供一个名词,一遍容器grid-template-areas属性创建模板进行引用.也可以作为<code>grid-row</code>和<code>grid-cloumn</code>的缩写.</p><h5 id="justify-self-align-self"><a href="#justify-self-align-self" class="headerlink" title="justify-self/align-self"></a>justify-self/align-self</h5><p>items的水平/垂直对其方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;CSS Grid 布局是CSS中最强大的布局系统,与flexbox的一维布局系统不同,CSS Grid是一个二维布局系统,它可以同时处理行和列.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一个Grid布局&quot;&gt;&lt;a href=&quot;#第一个G
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 css" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-css/"/>
    
  </entry>
  
  <entry>
    <title>上海外滩随拍</title>
    <link href="http://yoursite.com/2017/11/05/%E4%B8%8A%E6%B5%B7%E5%A4%96%E6%BB%A9%E9%9A%8F%E6%8B%8D/"/>
    <id>http://yoursite.com/2017/11/05/上海外滩随拍/</id>
    <published>2017-11-05T03:01:56.000Z</published>
    <updated>2017-12-26T07:09:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1640.JPG" alt="外滩街景"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1641.JPG" alt="外滩建筑"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1642.JPG" alt="东方明珠"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1674.JPG" alt="外滩自拍"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1648.JPG" alt="豫园"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1673.JPG" alt="豫园"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oy299xjr2.bkt.clouddn.com/IMG_1640.JPG&quot; alt=&quot;外滩街景&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy299xjr2.bkt.clouddn.com/IMG_1641.JPG&quot; alt=
      
    
    </summary>
    
      <category term="旅行" scheme="http://yoursite.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="http://yoursite.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>浏览器数据持久化存储技术解析</title>
    <link href="http://yoursite.com/2017/11/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/11/04/浏览器数据持久化存储技术解析/</id>
    <published>2017-11-04T07:09:36.000Z</published>
    <updated>2017-12-22T07:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>打开Chrome浏览器的调试模式,Application就列举了现代浏览器的8种缓存机制:HTTP文件缓存,LocalStorage,SessionStorage,indexDB,webSQL,Cookie,CacheStorage,ApplicationCache.</p></blockquote><h3 id="从网址到网页展示"><a href="#从网址到网页展示" class="headerlink" title="从网址到网页展示"></a>从网址到网页展示</h3><blockquote><p>我们先看一个问题,从我们打开浏览器地址栏输入一个网址,到浏览器展示网页内容的这段时间,浏览器和服务端都发生了什么事情?</p></blockquote><ul><li>在接受到用户输入的网址后,浏览器会开启一个线程来处理这个请求,对用户输入的 URL 地址进行分析判断,如果是HTTP协议就按照HTTP方式来处理.</li><li>调用浏览器引擎中的对应方法,比如 WebView 中的 loadUrl 方法,分析并加载这个 URL 地址.</li><li>通过 DNS 解析获取该网站对应的 IP 地址,查询完成后连同浏览器的 Cookies,userAgent 等信息向网站目的地 IP 发送 Get 请求.</li><li>进行 HTTP 协议会话,浏览器客户端向 web 服务器发送报文.</li><li>进入网站后台上的 web 服务器处理请求, 如 Apache,Tomcat, Node.js服务器.</li><li>进入部署好的后端应用,如 PHP, java, Javascript, Python等后端程序,找到对应的请求处理逻辑,这期间可能会读取服务器缓存或查询数据库等.</li><li>服务器处理请求并返回响应报文,此时如果浏览器访问过该页面,缓存上有对应资源,会与服务器最后修改记录对比,一致则返回304,否则返回200与对应的内容.</li><li>浏览器开始下载 HTML 文档(响应报文状态码为200时) 或者从本地缓存读取文件内容(浏览器缓存有效或响应报文状态码为304时).</li><li>浏览器根据下载接收到的 HTML 文件解析结构建立 DOM文档树,并根据 HTML 中的标记请求下载指定的MIME文件(如CSS,JAvaScript脚本等),同时设置缓存等内容.</li><li>页面开始解析渲染DOM,CSS根据规则解析并结合DOM文档树进行网页内容布局和绘制渲染,JavaScript根据DOM API 操作DOM,并读取浏览器缓存,执行事件绑定等,页面整个展示过程完成.</li></ul><h3 id="HTTP文件缓存"><a href="#HTTP文件缓存" class="headerlink" title="HTTP文件缓存"></a>HTTP文件缓存</h3><p>HTTP文件缓存是基于HTTP协议的浏览器端文件级缓存机制,在文件重复请求的情况下,浏览器可以根据HTTP响应的协议头信息判断是从服务器端请求文件还是本地读取文件.以下是 文件缓存的过程.</p><pre><code>1. 浏览器会先查询Cache-Control来判断内容是否过期,如果未过期,直接读取浏览器端缓存文件不发送HTTP请求,否则进入下一步.2. 在浏览器端判断上次文件返回头中是否含有Etag信息,有则连同If-None-Match一起向服务器发生请求,服务端判断Etag未修改则返回状态304,修改则返回200,否则进入下一步.3. 在浏览器端判断上次文件是否含有Last-Modified信息,有则一起向服务器发送请求,服务器判断是否失效,失效返回200,未失效返回304.4. 如果Etag和Last-Modified都不存在,则向服务器请求内容.</code></pre><p>在HTML中我们添加的<code>meta</code>标签中的<code>Expires</code>和<code>Cache-Control</code>,且一般<code>Cache-Control</code>设置的是秒,如果以上两个同时设置,只要<code>Cache-Control</code>的设置生效.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"Mon, 20 Jul 2016 23:00:00 GMT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"max-age=7200"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时服务端也要设置静态资源的缓存时间.我们可以结合Koa-static中间件设置实现.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> app = koa()</span><br><span class="line">app.use(<span class="keyword">static</span>(<span class="string">'./pages'</span>,&#123;</span><br><span class="line">  maxage: <span class="number">7200</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>localStorage是HTML5的一种本地缓存方案,目前主要用于浏览器端保存体积较大的数据(如AJAX返回结果等).但它在各版本浏览器的长度限制不一.它的核心API只有4个.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localStorange.setItem(key,value)<span class="comment">//设置存储记录</span></span><br><span class="line">localStorage.getItem(key)<span class="comment">//获取储存记录</span></span><br><span class="line">localStorage.removeItem(key)<span class="comment">//删除记录</span></span><br><span class="line">localStorage.clear()<span class="comment">//清空</span></span><br></pre></td></tr></table></figure><p>LocalStorage只支持简单数据类型的读取,为方便读取对象等格式内容,通常需要进行一层安全封装再引入使用.</p><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>sessionStorage和LocalStorage功能类似,但sessionStorange在浏览器关闭时会自动清空.它的API和LocalStorage的API完全相同,但由于不能持久化数据存储,因此使用场景较少.</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>cookie是网站为了辨别用户身份或session追踪而存储在用户浏览器的数据,cookie一般会通过HTTP请求到服务器端.一条cookie主要由键,值,域,过期时间和大小组成,一般用于保存用户的网站认证信息.通常最大限制为4KB.</p><p>cookie分为两种,sessionCookie和持久型Cookie.前者一般不设置过期时间,表示与浏览器会话期间保存在内存中,持久性Cookie会设置过期时间保存在本地硬盘中,知道过期或清空才失效.</p><p>Cookie设置中有个HttpOnly参数,浏览器端通过<code>doucument.cookie</code>是读取不到HttpOnly类型的Cookie的,只能通过HTTP请求头发送到服务器进行读写操作.这样可以避免服务器端的Cookie记录被js修改,保证了服务端验证cookie的安全性.</p><h3 id="WebSQL"><a href="#WebSQL" class="headerlink" title="WebSQL"></a>WebSQL</h3><p>webSQL是浏览器端用于存储大量数据的缓存机制,以一个独立浏览器端数据存储规范的形式出现.它在HTML5前就已经出现,是单独的规范,它将数据以数据库二维表的形式存储在客户端,并且允许SQL语句的查询.</p><p>webSQL的API主要包含上个核心方法:openDatabase(),transaction()和executeAql().</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//openDatabase()打开已经存在的数据库,不存在就创建.他的五个参数是数据库名,版本号,描述,数据库大小,创建回调.</span></span><br><span class="line"><span class="keyword">let</span> db = openDatabase(<span class="string">'mydatabase'</span>,<span class="string">'1.0'</span>,<span class="string">'test'</span>,<span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">db.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">table</span>)</span>&#123;</span><br><span class="line">  table.executeSql(<span class="string">'INSERT INTO t1 (id,msg) VALUES (1,"hello")'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//transaction方法允许我们根据情况控制事物提交或回滚.</span></span><br><span class="line"><span class="comment">//executeSql用于执行真实的SQL查询语句.</span></span><br></pre></td></tr></table></figure><h3 id="IndexDB"><a href="#IndexDB" class="headerlink" title="IndexDB"></a>IndexDB</h3><p>IndexDB也是客户端存储大量结构化数据并且能在这些数据上使用索引进行高性能检索的一套API.由于webSQL不是HTML5规范,一般推荐使用IndexDB进行大量数据存储,其基本实现和webSQL类似.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(database)&#123;</span><br><span class="line">  database.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">tx</span>)</span>&#123;</span><br><span class="line">    tx.executeSql(<span class="string">'INSERT INTO t1 (id,msg) VALUES (1,"hello")'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Application-Cache"><a href="#Application-Cache" class="headerlink" title="Application Cache"></a>Application Cache</h3><p>Application Cache是一种允许浏览器通过manifest配置文件在本地有选择性的存储js,css,图片等静态资源的缓存机制.当页面不是首次打开时,通过一个特定的manifest文件配置描述选择性新读取本地ApplicationCache的文件.所以它具有<strong>离线浏览</strong>,<strong>快速加载</strong>,<strong>服务器载荷小</strong>的优势.它的文件访问及更新机制如下:</p><pre><code>1. 判断是否是第二次加载页面.2. 是的话访问AppCache.3. 检查manifest文件是否更新4. 无更新从AppCache读取,有更新则重新拉取并更新AppCache.</code></pre><p>使用方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html manifest=<span class="string">"app.manifest"</span>&gt;</span><br><span class="line"><span class="comment">//对应的描述文件如下</span></span><br><span class="line">CACHE MANIFEST</span><br><span class="line">#VERSION 1.0</span><br><span class="line">CACHE:</span><br><span class="line">xxx.css</span><br><span class="line">XXX.js</span><br><span class="line">XXX.png</span><br></pre></td></tr></table></figure><p>浏览器也可以根据window.applicationCache来对其进行控制.</p><p>尽管ApplicationCache的实现很方便,但是已经开始被标准弃用,渐渐将会由ServiceWorkers来代替.总之,ApplicationCache仍是一个不成熟的本地缓存解决方案.</p><h3 id="cacheStorage"><a href="#cacheStorage" class="headerlink" title="cacheStorage"></a>cacheStorage</h3><p>cacheStorage是ServiceWorkers规范中定义的,用于保存每个ServiceWorker声明的Cache对象,是未来可代替ApplicationCache的离线方案.</p><p>CacheStorage在浏览器端为window.caches,有open,match,has,delete,keys五个API.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">caches.has();<span class="comment">//检查如果包含cache对象,返回一个promise</span></span><br><span class="line">caches.open();<span class="comment">//打开一个cache对象,返回一个promsie</span></span><br><span class="line">caches.delete();<span class="comment">//删除一个cache对象,返回一个promise</span></span><br><span class="line">caches.keys();<span class="comment">//含有keys中字符串的任意一个,返回一个promise</span></span><br><span class="line">caches.match();<span class="comment">//匹配key中含有该字符的cache,返回一个promise</span></span><br></pre></td></tr></table></figure><h3 id="Flash缓存"><a href="#Flash缓存" class="headerlink" title="Flash缓存"></a>Flash缓存</h3><p>Flash缓存主要基于网页端Flash,具有读写浏览器本地目录的功能,同时也可以向js提供调用的API,这样页面就可以通过js调用Flash读写本地指定的磁盘目录,达到本地数据缓存的目的.</p><p>本文摘自张成文编著&lt;&lt;现代前端技术解析&gt;&gt;,详情请点击<a href="https://github.com/ouvens" target="_blank" rel="external">张成文的Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;打开Chrome浏览器的调试模式,Application就列举了现代浏览器的8种缓存机制:HTTP文件缓存,LocalStorage,SessionStorage,indexDB,webSQL,Cookie,CacheStorage,Applica
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 数据储存" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>读&lt;&lt;美国种族简史&gt;&gt;</title>
    <link href="http://yoursite.com/2017/09/06/%E8%AF%BB-%E7%BE%8E%E5%9B%BD%E7%A7%8D%E6%97%8F%E7%AE%80%E5%8F%B2/"/>
    <id>http://yoursite.com/2017/09/06/读-美国种族简史/</id>
    <published>2017-09-06T08:58:07.000Z</published>
    <updated>2018-03-06T09:12:15.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爱尔兰人"><a href="#爱尔兰人" class="headerlink" title="爱尔兰人"></a>爱尔兰人</h3><p>爱尔兰人是美国城市里第一批重要的”少数”种族之一.古代的爱尔兰曾经是个技艺和学术上有过某些建树的国家.在15世纪初期,英国国王对爱尔兰的有效控制仅仅局限在东海岸都柏林附近30英里长10英里宽的一条狭长地带.千百年来,爱尔兰的历史就是一部充满偶发的流血起义和遭到血腥镇压的历史.英国在战胜爱尔兰后,颁布了所谓的惩罚性法律,剥夺了爱尔兰人的许多基本权利.为了满足本民族的宗教,教育和政治需要,各种各样的爱尔兰人的秘密和底层的组织纷纷发展起来.由于不得不为自己提供是由政府提供的机构设施,爱尔兰人不但培养了高水平的组织本领,也锻炼了出去规避他们视为非法压迫他们的政府机构的本领.</p><p>爱尔兰的产权制度规定,佃农在土地上的任何额外收获,都属于土地所有者的,这就摧毁了佃农的积极性.这种制度在道德和经济上的影响,远远超过了这些法律的实施时间和地点造成的影响.爱尔兰人不但由于这些法律而蒙受了眼前的损失,而且由于积极性下降的社会环境而蒙受了更长远的损失.在后来的美国,学术界和民众都异口同声的说爱尔兰人懒惰和无能,当他们不会想到这是由他们长期受到的压迫中慢慢影响的.</p><p>19世纪30年代起,谷物歉收和灾荒加剧了爱尔兰的贫困情况.由于爱尔兰1/4的可耕地用于种植马铃薯,国际马铃薯的歉收对爱尔兰的影响是巨大的.但英国人并没有因为这个原因而放松对爱尔兰的压迫剥削.更多的爱尔兰人选择逃离,这时美国就成了爱尔兰人的第一选择.来美的第一批爱尔兰移民通过签订卖身契约,答应到美充当若干年苦工,以此抵偿未来雇主或轮船公司预先垫支的差旅费,做船抵达宾夕法尼亚中部,之后才然后慢慢涌进美国东北部.</p><h3 id="德国人"><a href="#德国人" class="headerlink" title="德国人"></a>德国人</h3><p>具有德国血统的美国人,仅次于英裔人.德国的军事传统为美国造就了若干名名垂青史的将帅,其中包括在一战和二战指挥美军打败德军的两名虎将,既潘兴和艾森豪威尔.</p><p>在还没有德国这个概念的时候,就有相当多的德意志人移居美国了.直到1871年,普鲁士,巴伐利亚等日耳曼小国才被俾斯麦统一起来.早起移民来美的德意志人大都掺杂在荷兰人的队伍中,于1620年定居在新阿姆斯特丹(后来改称纽约)的.”宾夕法尼亚荷兰人”(Pennsylvania Dutch)由此发端,而此处的”荷兰人”(Dutch)这个词,实际上由美国人的发音错误造成的,把”德意志人”(Deutsch)读成了荷兰人(Dutch).</p><p>1776年,美国人分裂为英国托利党的支持者和拥护独立的革命派,美籍德意志人则分裂为和平主义者和革命分子. 冯.施图本将军就是从他的祖国赶来,目的就是参加美国独立战争,华盛顿困守瓦力福基时,施图本将军曾为之出谋划策,作为美国军队的教官,他成功训练出一支足以打败英国职业化军队的铁骑.</p><p>不管在农村还是城市,德国人集居的方式使他们世代保留着自己的语言和文化.这一点时常表现在民居和文化上的孤立.”德国人不大于美国老百姓交往”,他们彼此从远处观察对方,”都带着一种真诚的好奇心,时常夹杂着对彼此的蔑视”.除了语言,其他德意志文化的许多特点也被带到了美国.和圣诞树一样,牛肉香肠,汉堡包和啤酒已成为美国生活方式的必备之物.在19世纪的辛辛那提,沿街叫卖的德裔食品摊贩,用把牛肉熏制的香肠往长条面包中一夹,就成了后来的热狗.圣路易斯及其周围地区聚集的大批德国人,为另一家德国酿酒厂的创办提供了市场,他的老板是安海斯-步希,生产的是百威啤酒.德国移民推动的最重大的社会变化之一,就是在美国推广了各式各样的天真活泼而且适合整个家庭在公开场合开展的娱乐活动.音乐演奏,野餐,跳舞,打牌,游泳等美国人闲暇时爱从事的文艺活动都是德国移民在19世纪带过来并推广出来的.德国人还组织了军乐团,交响乐团和各式各样的合唱团.</p><p>德国人越来越被美国人接受,但第一次世界大战爆发时,席卷全美的反德情绪却粗暴的使这些发生了变化.美国人的反德情绪不仅仅局限在德国本身,而且殃及日耳曼文化和美籍德国人.20世纪早期,美籍德国人慢慢被美国社会同化,其速度后来更有所加快.随着希特勒和纳粹与20世纪30年代在德国的崛起,德国掀起了向美国移民的新高潮,包括世界上数一数二的艺术家,科学家,其中最杰出的就是爱因斯坦.二战虽然也掀起了反德情绪,但其程度远不及一战期间,这次指挥美军在欧洲登陆并打败德国的就是一位具有德意志血统的将军”艾森豪威尔”.</p><h3 id="犹太人"><a href="#犹太人" class="headerlink" title="犹太人"></a>犹太人</h3><p>犹太人不是来自某一国家或属于某一文化,而是来自许多国家并分属不同的文化.尽管犹太人因寄居的国家不同而产生了文化上的割裂,甚至在宗教理论和实践上也存在分歧.但是,犹太人不仅供奉古代以色列的统一始祖,分享宗教信仰和历史传统的共同内核,而且作为少数民族,不管寄居何处,都曾有过不同程度的长期遭到异族敌视的悲惨经历.</p><p>公元70年,当罗马帝国的军队占领巴勒斯坦时,古犹太人就从自己的故土被驱逐了出来,从此开始流落异国他乡.基督教在整个欧洲取代了多神信仰之后,犹太人成为了全欧洲大陆唯一不信仰基督教的民族,所到之处皆为”局外人”.这使犹太人在基督教狂热时期(比如十字军东侵)或宗教大恐怖时期出于自身难保的地位.他们在宗教上持有不同见解,而且不管他们到哪都是外乡人,他们有自己的文化,讲不同的语言,穿不同的衣服,而且一般都在单独的村庄居住,他们是被贴了标签的人,周围那些无知且迷信的居民无论陷入什么样的激情或恐惧,一遇到风吹草动,便自然而然的把犹太人当成攻击的靶子.</p><p>犹太人通常居住在一起,集聚区的生活方式排除了欧洲犹太人从事农业的可能性.他们在到达纽约及美国其他城市之前的好几百年,就已经都市化了.犹太人在他们最受孤立的欧洲地区,基本上没有受到文艺复兴后现代思想潮流的熏陶,所以他们的文化依然是古老的乡土文化.欧洲犹太人的典型特征之一就是对知识的尊重和景仰.这里指的主要是宗教知识,有关犹太教法典的知识,以及对其意义和内涵的周密而细致的分析.</p><p>第一批抵达美洲殖民地的犹太人是所谓的赛法迪犹太人,他们有在西班牙及葡萄牙生活的经历,哥伦布发现新大陆所引发了一系列时间,这也包括赛法迪犹太人到达美洲.之后,德国犹太人也来了,但德国犹太人不聚积在某一处,而是散落在美国各地,有些人在宾夕法尼亚的农场落户,有的则在中西部定居,有的则跟着大篷车向西部进发,这批德国犹太人中有个货郎,名叫李维.斯特劳斯,李维斯牛仔裤就是以他的名字命名的.</p><p>13世纪和14世纪,波兰王室鼓励犹太人在其国土上定居,并颁发保护他们的特许状.犹太人成了欧洲地区先进技术和知识传入波兰的载体.几个世纪之后,犹太工匠和商人的家业逐渐壮大起来,这招致周围贫穷而不识字的波兰农民及其教会头目的憎恶和仇恨.犹太人充当政府的税务官或给地主收租,这更使他们成为当众民众的眼中钉.随着政治气候的变化,犹太人时而受到当局的保护,时而遭受当局的迫害.于是,但俄国人从波兰手里夺取的地方,把犹太人禁锢在他们的居住区.叶卡捷琳娜二世之后的40年间,离俄赴美的人中有75%是犹太人,而到美的犹太人中也正好有75%的人来自俄国.</p><p>东欧犹太人涌入美国后,与当地的犹太人格格不入.德国犹太人对他们的生活之寒酸感到不可思议,不仅如此,受教育程度也很低,举止也显得很粗俗.德国犹太人还造出了一个词”老K”来称呼东欧的犹太人.但这些都是有原因的,德国犹太人一直在美国的安全环境下飞黄腾达,从来也没有体验过东欧犹太人遭受的那些令人发指的欺凌,不知个中滋味,而东欧犹太人对那些欺凌却记忆犹新,导致他们缺乏自信心和气度,不敢于陌生人搭讪,再加上那副胆小怕事,逆来顺受的模样,自然受到外人的欺凌和捉弄的对象.而且外部有东欧犹太人母亲保护子女太过分的说法,实际上这些犹太妇女当初在东欧时,家里的小孩一旦离开家门,父母就可能再也见不到了.如果人们一开始就知道这些背景就不会对他们有这么多的偏见.</p><p>辛苦的工作和重视教育的犹太人很快就有了积蓄,随着经济地位的上升,犹太人也向其他居住地区扩散开来.犹太裔电影业在美国很有地位,米高梅(MGM)电影制片厂的名字缩写,三个字母有两个都是取自犹太人Goldwyn和Mayer,其他的电影业巨子还有华纳兄弟和威廉福克斯.纽约历史上最出名的两家报纸也是由犹太人创办的,&lt;&lt;纽约时报&gt;&gt;和&lt;&lt;犹太前进报&gt;&gt;,有一半犹太血统的约瑟夫.普林策创办了&lt;&lt;纽约世界报&gt;&gt;并设立了普利策奖.在科学和医学界知名的犹太人当属爱因斯坦,罗伯特奥本海默和约纳斯沙克这样的巨擘了.从某种意义上来说,犹太人是美国成功故事的典型代表人物,在逆境中从一无所有到腰缠万贯.</p><h3 id="意大利人"><a href="#意大利人" class="headerlink" title="意大利人"></a>意大利人</h3><p>今天的美籍意大利人,多数是从意大利南部移居美国的那部分人的后裔.意大利半岛的悠久历史可以追溯到基督之前的罗马共和国和罗马帝国,然而作为一个国家,意大利又是年轻的,它仅始于1861年.这一年意大利各省在历经多个世纪的分裂后首次统一在一个政府管辖之下.在文化上,意大利各省甚至于每个小镇,都觉得自身拥有自成一体的独特文化,即便距离很接近,语言和文化也相距甚远.在地理上,该国被亚平宁山脉一分为二,形成了许许多多的山谷,西西里岛和撒丁岛是其两大岛屿.</p><p>在意大利南部,可耕地少且零散,致使许多村落相互阻隔,反过来又加剧了他们在语言和其他文化的差距.另外,意大利南部的气候和地形造成了该地区的贫困,气温虽然适中,但降雨量偏低且只集中在少数几个月份,作物成长季节却逢干旱,雨季到来时又是倾盆而下,造成水土流失.致使沟壑,池塘积满死水,孳生疟疾.因为土质最肥沃的低地同时又是疟疾最容易传播的地方.除了农业,工业也先天不足,高山和丘陵占据该国国土面积的75%,只有一半的国土属可耕地,可耕地又大多集中在北部.历史加重了大自然造成的问题,意大利南部长期是历代帝国和王朝的战场,罗马帝国以来,战争在南部反复上演.此外,意大利文艺复兴的硕果是意大利北部的产物,对南部影响很小.</p><p>尽管就历史的创伤和极度的贫困而言,意大利人和爱尔兰人是难兄难弟,但在某些方面又不一样.爱尔兰人所受到的压迫,来自于其持有不同宗教信仰的异族,所以在回应时具有强烈的全民族意识,而意大利农民则长期受到宗教信仰相同的本种族人的压迫,这使他们不能团结在一起,而是完全仰仗直系家庭的其他成员,意大利人最信得过的人很少超出近亲的范围,南部意大利人的反击方式既种族间的报复和黑手党也都是以对方的家庭为目的的.值得一提的,在南部意大利人眼中,教育是认为对生活方式构成威胁的.他们认为受教育不能提供向上的社会流动,在那种等级森严的社会里,恐怕这不无道理.教育被视为对家庭神圣性的一种侵犯,是把儿童作为一个孤立的个体抽离出来,教给他们一种相左的一套价值体系,对于穷困潦倒的平民百姓来说,失去一个出外挣钱的劳动力实在是一种不堪忍受的损失.</p><p>早期来美的意大利人,近90%都是成年男性,小孩所占的比例远远低于其他国家的移民,这表明,他们来美一开始就是短暂的或是试探性的,返回故土既非失败亦非失望,不少回流的人都在美国挣了一笔可观的钱财.美籍意大利人的居住模式反映出他们在意大利时的地区主义格局,他们往往来自同一个地区的人一起集居在一处,社会关系也局限在某一个范围,这阻碍了全体意大利移民相互间缺乏强烈的认同感,又使他们不敢于其他种族发生摩擦.他们能和他们和谐共处,但并不代表他们能被别人同化,比如他们的择偶对象几乎从不超出本族的范围.</p><p>从社会关系来讲,在一个崭新的经济和社会环境中,意大利移民易遭不幸,出于自卫的目的,他们创建了互助会,这算是现代意义上的组织,即一种由陌生人组成了社会组织结构,该结构自身所确定的宗旨使这些陌生人聚集到了一起,通用汽车公司,红十字会,政治运动,公会或是体协,都是这类组织.职业犯罪活动在意大利南部是一门高度发达的艺术,特别是黑手党的老巢西西里,大多数意大利移民并不参与这类活动,因为他们自身就是黑手党的主要受害者.意大利和其他移民一样,较高的犯罪率都发生在第二代移民中.</p><p>今天的美籍意大利人在收入,教育智商得分上都与其他美国人大体相仿.值得一提的是,意大利人的崛起基本上并未借助人们通常视为必经之路的教育或是教育相关的职业.美籍意大利人不仅苦干,而且强调自立.他们拒绝接受政府的法定救济,甚至在收入低微时也保持良好的信誉,不热衷于政治和投机.但也是这样,造成了他们与黑人之间关系的恶化.早期意大利人对黑人表现出的敌意较少.黑人领袖所强调的种族进步之路,恰是意大利人所排斥的道路,他们认为靠政府救济和特殊照顾违背他们的价值观念.这两个种族的生活作风也相互冲突,双方都认为对方的言语和肢体语言是故意的侮辱,实际上在两种不同的文化里都有自己的内涵.这使他们与黑人的摩擦越来越多,而与华人则不一样,与华人虽然肤色不同,但价值观念和生活作风与意大利人并无相悖之处.意大利人和中国人相处的很好,远胜于他们和爱尔兰人的关系.总而言之,笼统的用”种族主义”这个字眼来解释,无法找到种族间敌对关系的缘由.</p><p>事实证明,美国确实是从意大利来到这里的那些人的机会之邦.但是,把机会变成现实也要付出艰苦的劳动和努力,并具备持之以恒的毅力.那些早起从贫困的意大利南部来的移民用他们的双手获得了新生.</p><h3 id="华人"><a href="#华人" class="headerlink" title="华人"></a>华人</h3><p>中国人常被称为亚洲的犹太人,他们在许多不同的国度里过着自己独立的文化和社会生活.中国人的技能和组织本领使他们称为许多贫穷国家的有价值的外来户,而家境富足又使他们称为政治上受打击的对象.所以这些国家的政府对和华人的态度一直是爱憎兼具的.时至1966年,所罗门群岛政府还在是否要驱逐所有华人的问题进行过辩论.在印度尼西亚和墨西哥都曾发生过对华人的大屠杀.</p><p>中国曾在很长的一段时间内一直都是世界上经济,技术和社会组织最先进的国家,时至16世纪,中国人仍拥有世界上最高的生活水平.海华华人的出现和这个伟大文明的衰落是相关的,两者都是自明朝开始.”二战”前移居美国的华人,绝大部分都来自中国南方的一个省份,即广东省,且集中在广东省的台山,他们说台山的方言,但与中国通用的语言相距甚远.”二战”后移居美国的人大都说普通话,这和原有的在美华人产生了隔阂.中国人在极为动荡的悠久历史中所留下的遗产,就是忠于本国本土的家族,将其视为个人唯一可以依靠的归宿.随着华人来到美国的中国文化的另一特点就是对知识的尊重,毕竟中国在隋唐就开创了科举制.</p><p>第一批华人移民是作为合同工来美的,他们在农业,铁路修建和其他繁重的体力劳动方面很能吃苦.但他们来美只是尝试性的,只是想赚一笔钱就回国.但美国人对中国移民的态度是苛刻的,甚至是粗暴的.华人既不是白人,又不是基督徒,无论是文化上还是生理上都只能看做不能被同化的种族,美国人视他们为竞争对手,因为他们吃苦耐劳且工资很低.所以华人在美常常会受到其他种族的迫害.1882年的&lt;&lt;排华法案&gt;&gt;打打削减了华人移民的数量,其他新的法律先是禁止在美华人成为美国公民,接着又把公民身份当作从事多项职业的先决条件.华人赴美的大门几乎被彻底关闭.由于就业无门,只能自谋出路,在几十年间,他们的主要职业就是洗衣店.中国餐馆是另一个就业渠道,这些餐馆大都坐落在华人社区或唐人街,竭力让人感到他们不是在于白人竞争.面对无处不在的歧视,中国人的反应是退避三舍,尽量不惹人注目.这和身处隔离区的欧洲犹太人很相似.唐人街发展了自己的社会组织,并推举出首领来处理内部事务,除非万不得已不会求助于当地的美国机构.</p><p>早期中国移民的最大悲剧就是如此重视家庭的民族被剥夺了在美组建家庭的可能性.1882年美国单方面压低中国人移民的数量,结果造成华人两性比例严重失调.1860年,在美华人的男女比例约为20 : 1,到1890年上升为27 : 1,很明显许多早期抵美的华人无法组建家庭及繁衍后代,由于贫困又不能返回中国,数以千计的华人孤独的度过了他们的一生,同时也造成了同时期华人的自杀率是全美平均数的三倍.  </p><p>华人领袖主持唐人街的工作,他们用现今唐人街典型的宝塔形建筑来装饰自己的地带,以至于唐人街旅游业兴旺发达.华人的节庆和游行活动也受到警察的保护,并成为招揽大批观光客的市政项目.由于华人集中居住在一个不发生问题的地区,或至少其问题很难引起外界注意的社区,以至于华人被视为一个安静而有有秩序的种族.</p><h3 id="日本人"><a href="#日本人" class="headerlink" title="日本人"></a>日本人</h3><p>日裔美国人的历史，大体上受到美国人对华人的所有态度，偏见及歧视的影响，华人到达美国比日本人要早30年左右。日本向美国移民始于19世纪后期，德川家族的军阀统治于1868年被推翻，取而代之的是一整套新式的价值观念和民族雄心。但日本的孤立于1854年被强行结束，美国的佩利将军率领美国海军进驻东京湾，诱使日本签订了条约，使日本有机会接触西方的思想和技术，为日本100年后的政治发展确定了发展方向。日本对西方感情很复杂，既憎恶其傲慢，又欣赏其赖以称霸的成就。</p><p>日本明治维新给了农民以行动和择业的自由，但也使地主在有利可图的情况下可以随时把佃农从土地上赶走。旧的武士阶层被打破，随着他们在经济和社会上的地位日益没落，那些为武士阶层服务的商人和手艺人也走了下坡路。因此许多人去海外寻找机会，但日本对海外日侨十分关心，国家有能力和威望为其撑腰，这使日本有别于当时的中国，中国当时太弱，自身也难免不被瓜分，根本谈不上为海外华侨讲话。日本政府事实上将其移民看做暂时性的，而美国因反对华人而制定的《排华法案》也使得其他亚洲人无法申请美国国籍。许多在美的日本人把钱汇到家乡，对日本很多城市的发展起到了很重要的作用。比如广岛这样的新兴工业中心才成为“二战”中的一个首要军事目标。</p><p>由于日本在19世纪和20世纪之交成为世界强国之一，它在1895年甲午海战战胜了中国，1905年又战胜了俄国，所以美国不能向以前对中国人那样以突然，单方面的终止向美国的移民，美日两国于1908年达成一个保全颜面协议就，史称“君子协议”，该协议规定，日本严格限制赴美的人数，而美方允许让在美的日裔家属与亲人团聚。还有一个很特别的地方，与其他国家不同，日本没有把它的那些精疲力尽，穷困潦倒的劳苦大众送到美国，在移民这一点，日本是严格挑选优秀公民，虽然他们并不是来自富裕家庭。</p><p>1941年12月7日，日本向停泊在夏威夷珍珠港的美国舰队发动了一次大规模袭击。这使美国遭受到有史以来最大的惨败。更惊人的是偷袭发生时，日本外交官正在华盛顿扮演和平使者的角色，还有就是日本同时在西太平洋发起攻势。美国人对日本的气愤和恐惧一股脑全发泄到了美籍日本人身上，辱骂和施暴行为时有发生。1942年罗斯福总统签署一项行政命令，授权军方可以把“有关人等”运送到“拘留营”，这个政策得到了广泛的支持。大规模的拘留使得在美日本人匆忙的把房子和其他产业在短时间卖掉，经济收到了很大的损失。但总体来讲，日裔美国人接受了拘留的严酷事实，并不得已退而求其次。尽力改善自己的境遇。</p><p>1943年美国陆军开始征召被划为“敌侨”而无资格参军的在美第二代日本人去服役。共有30多万日裔美国人参加了“二战”，日裔兵组成了442团成了“二战”获得荣誉最多的一支劲旅。战后随着日裔美国人的经济地位上升，再之美国种族主义普遍退潮，美籍日本人正在变得美国化。</p><h3 id="黑人"><a href="#黑人" class="headerlink" title="黑人"></a>黑人</h3><p>美国黑人是在违反其自身意志的情况下被强行带到美国的唯一种族。<br>非洲的面积比欧洲大很多，但其海岸线却没有欧洲的长，且天然港口并不多。非洲的河流受到地形和四季变化的制约，只能断断续续的通航，茂密的原始森林和无边的沙漠使得大陆内部的交通和交流很是困难。造成了该大陆的人们各居一隅，操着800多种语言分成无数的部落，他们无法在收到攻击后有效和团结起来，为外人将他们大批虏获提供了机会。且奴隶制早就存在于非洲各部落之间，其历史可以追溯到古希腊和古罗马时期。把黑人当作商品出售，是公元8世纪阿拉伯人入侵北非之后开始的。当非洲人被阿拉伯的奴隶贩子带到西班牙时，欧洲的奴隶制已经开始销声匿迹了。于是西班牙和葡萄牙冒险来到撒哈拉以南的非洲地区，抓捕黑人当作自己的奴隶。当西班牙开始在西半球开辟殖民地时，有大批奴隶被运送到那里当苦力。哥伦布发现美洲大陆后，这种情况更严重了。<br>任何一种奴隶制面临的关键问题就是如何防止奴隶逃跑，在美国南北战争爆发的南方，防止奴隶逃跑的办法不是筑起篱笆或设置岗哨，而是通过使奴隶处于无知，依附和恐惧的状态来实现的。1793年轧花机的发明，使60%的美国奴隶从事棉花种植工作，奴隶日趋集中到美国南部那些土质和气候适宜种植棉花的地带。而美国北方奴隶就很少，因为北方的气候并不适合种植大田作物。美国南北战争不仅是美国黑人历史上的一个转折点，而且堪称奴隶制度的最后一次大流血，对黑人来说，自由既解救了他们，又是他们陷入了一种很被动的境地。因为这些获得自由的奴隶文化水平并不高，只能从事和以前一样的工作，而且他们并不会安顿下来开始干活，只是继续依靠政府发放的救济生活，某些州的地方政府不得已颁布法令，强制黑人进行文化教育，但他们并不能和其他人种一起学习，只是创办专收黑人儿童的学校。虽然黑人在正规教育方面的进步及艰辛有缓慢，但他们发展了新型的文化风格。尤其是音乐和体育方面表现非常出色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;爱尔兰人&quot;&gt;&lt;a href=&quot;#爱尔兰人&quot; class=&quot;headerlink&quot; title=&quot;爱尔兰人&quot;&gt;&lt;/a&gt;爱尔兰人&lt;/h3&gt;&lt;p&gt;爱尔兰人是美国城市里第一批重要的”少数”种族之一.古代的爱尔兰曾经是个技艺和学术上有过某些建树的国家.在15世纪初期,英国国
      
    
    </summary>
    
      <category term="读书" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="历史 美国" scheme="http://yoursite.com/tags/%E5%8E%86%E5%8F%B2-%E7%BE%8E%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>vue项目中的小总结</title>
    <link href="http://yoursite.com/2017/05/21/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/21/vue项目中的小总结/</id>
    <published>2017-05-21T06:45:23.000Z</published>
    <updated>2017-11-22T08:06:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单文件组件中data必须是一个函数-然后返回一个对象-避免多个组件数据混乱"><a href="#单文件组件中data必须是一个函数-然后返回一个对象-避免多个组件数据混乱" class="headerlink" title="单文件组件中data必须是一个函数,然后返回一个对象.避免多个组件数据混乱."></a>单文件组件中data必须是一个函数,然后返回一个对象.避免多个组件数据混乱.</h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            a: <span class="string">"123"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="列表循环时-尽量使用key-避免元素复用"><a href="#列表循环时-尽量使用key-避免元素复用" class="headerlink" title="列表循环时,尽量使用key,避免元素复用"></a>列表循环时,尽量使用key,避免元素复用</h3><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in array"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="在vue中使用less"><a href="#在vue中使用less" class="headerlink" title="在vue中使用less"></a>在vue中使用less</h3><pre><code>安装less及less-loader依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>修改webpack配置文件在单文件组件中使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure></code></pre><h3 id="nextTick的用法"><a href="#nextTick的用法" class="headerlink" title="$nextTick的用法"></a>$nextTick的用法</h3><pre><code>异步更新队列:Vue在观察到数据变化时不会直接更新Dom,而是开启一个队列,并缓冲在同一事件循环中发生的所有数据变化,然后去除重复数据,避免重复计算和dom操作,然后在下一个事件循环tick中,刷新队列并执行实际(已去重)的工作.$nextTick就是用来知道什么时候dom更新完成的.<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span>这是一段文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getText"</span>&gt;</span>获取div内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当我们点击按钮时,获取div的文本 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>).innerText;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="webpack打包上传服务器后项目图片路径的问题"><a href="#webpack打包上传服务器后项目图片路径的问题" class="headerlink" title="webpack打包上传服务器后项目图片路径的问题"></a>webpack打包上传服务器后项目图片路径的问题</h3><pre><code>1. 解决方式一:    修改config文件中index.js里assetsPublicPath为&apos;./&apos;,    然后修改webpack.base.conf.js里的url-loader的limit,根据文件大小相应的修改.    但是修改后打包的文件比较大,影响页面加载.2. 解决方式二:    修改config文件中index.js里assetsPublicPath为&apos;./&apos;,然后修改源代码中css的图片路径为绝对路径,    静态资源由之前的src下的assets文件转移到src同级的static文件下新建一个img文件.    如果该项目有两级以上的域名,就在绝对路径前加上该子域名,如&apos;/XXX/static/img/a.png&apos;</code></pre><h3 id="scoped下尽量不要使用标签选择器"><a href="#scoped下尽量不要使用标签选择器" class="headerlink" title="scoped下尽量不要使用标签选择器"></a>scoped下尽量不要使用标签选择器</h3><pre><code>scoped下尽量不要使用标签选择器,会影响页面性能.</code></pre><h3 id="vue组件添加原生事件"><a href="#vue组件添加原生事件" class="headerlink" title="vue组件添加原生事件"></a>vue组件添加原生事件</h3><pre><code>vue组件添加原生事件,必须在事件后添加.native修饰符,否则事件不会生效.     </code></pre><h3 id="在vue中使用TypeScript"><a href="#在vue中使用TypeScript" class="headerlink" title="在vue中使用TypeScript"></a>在vue中使用TypeScript</h3><pre><code>在vue中使用TypeScript1. 安装依赖    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-class-component vue-property-decorator --save</span><br><span class="line">npm i ts-loader typescript tslint tslint-loader tslint-config-standard --save-dev</span><br></pre></td></tr></table></figure>2. 配置webpack    -  找到&apos;./build/webpack.base.conf.js&apos;添加        <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;<span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>, <span class="string">'.ts'</span>],&#125;</span><br></pre></td></tr></table></figure>    -  找到module.rules,添加对.ts的解析        <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    enforce: <span class="string">'pre'</span>,</span><br><span class="line">    loader: <span class="string">'tslint-loader'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">    loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">        appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>    - 添加根路径tsconfig.json文件        <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 编译选项</span><br><span class="line">    "compilerOptions": &#123;</span><br><span class="line">        // 输出目录</span><br><span class="line">        "outDir": "./output",</span><br><span class="line">        // 是否包含可以用于 debug 的 sourceMap</span><br><span class="line">        "sourceMap": true,</span><br><span class="line">        // 以严格模式解析</span><br><span class="line">        "strict": true,</span><br><span class="line">        // 采用的模块系统</span><br><span class="line">        "module": "esnext",</span><br><span class="line">        // 如何处理模块</span><br><span class="line">        "moduleResolution": "node",</span><br><span class="line">        // 编译输出目标 ES 版本</span><br><span class="line">        "target": "es5",</span><br><span class="line">        // 允许从没有设置默认导出的模块中默认导入</span><br><span class="line">        "allowSyntheticDefaultImports": true,</span><br><span class="line">        // 将每个文件作为单独的模块</span><br><span class="line">        "isolatedModules": false,</span><br><span class="line">        // 启用装饰器</span><br><span class="line">        "experimentalDecorators": true,</span><br><span class="line">        // 启用设计类型元数据（用于反射）</span><br><span class="line">        "emitDecoratorMetadata": true,</span><br><span class="line">        // 在表达式和声明上有隐含的any类型时报错</span><br><span class="line">        "noImplicitAny": false,</span><br><span class="line">        // 不是函数的所有返回路径都有返回值时报错。</span><br><span class="line">        "noImplicitReturns": true,</span><br><span class="line">        // 从 tslib 导入外部帮助库: 比如__extends，__rest等</span><br><span class="line">        "importHelpers": true,</span><br><span class="line">        // 编译过程中打印文件名</span><br><span class="line">        "listFiles": true,</span><br><span class="line">        // 移除注释</span><br><span class="line">        "removeComments": true,</span><br><span class="line">        "suppressImplicitAnyIndexErrors": true,</span><br><span class="line">        // 允许编译javascript文件</span><br><span class="line">        "allowJs": true,</span><br><span class="line">        // 解析非相对模块名的基准目录</span><br><span class="line">        "baseUrl": "./",</span><br><span class="line">        // 指定特殊模块的路径</span><br><span class="line">        "paths": &#123;</span><br><span class="line">        "jquery": [</span><br><span class="line">            <span class="string">"node_modules/jquery/dist/jquery"</span></span><br><span class="line">        ]</span><br><span class="line">        &#125;,</span><br><span class="line">        // 编译过程中需要引入的库文件的列表</span><br><span class="line">        "lib": [</span><br><span class="line">        "dom",</span><br><span class="line">        "es2015",</span><br><span class="line">        <span class="string">"es2015.promise"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    - 添加根路径tslint.json文件        <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"tslint-config-standard"</span>,</span><br><span class="line">    <span class="attr">"globals"</span>: &#123;</span><br><span class="line">        <span class="attr">"require"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    - 在src下创建vue-shim.d.ts        <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>        之后再代码中引入.vue文件时需要加上.vue后缀,因为ts默认只识别*.ts文件    - 改造APP.vue文件        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Component <span class="keyword">from</span> <span class="string">'vue-class-component'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    @Component(&#123;&#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>    - 修改main.js为main.ts,并修改&apos;./build/webpack.base.conf.js&apos;中的entry为 `{app: &apos;./src/main.ts&apos;}`</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单文件组件中data必须是一个函数-然后返回一个对象-避免多个组件数据混乱&quot;&gt;&lt;a href=&quot;#单文件组件中data必须是一个函数-然后返回一个对象-避免多个组件数据混乱&quot; class=&quot;headerlink&quot; title=&quot;单文件组件中data必须是一个函数,
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue 前端" scheme="http://yoursite.com/tags/vue-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS常见布局实现</title>
    <link href="http://yoursite.com/2017/04/03/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/04/03/CSS常见布局实现/</id>
    <published>2017-04-03T07:26:03.000Z</published>
    <updated>2018-04-04T07:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul><li><p>文本/行内/行内块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">parent</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单个块级元素</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*左右设置margin为auto将会均分剩余空间.上下设置margin设置了auto,其计算值为0.*/</span></span><br></pre></td></tr></table></figure></li><li><p>多个块级元素</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123; </span><br><span class="line">    <span class="attribute">text-align</span>:center </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123; </span><br><span class="line">    <span class="attribute">display</span>: inline-block </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位实现居中</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123; </span><br><span class="line">    <span class="attribute">position</span>: relative </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">50%</span>;<span class="comment">/*父元素的50%;*/</span></span><br><span class="line"> <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);<span class="comment">/*自身的-50%;如果兼容性不好用margin: -XX;*/</span></span><br><span class="line"> <span class="comment">/*子绝父相,通过left或right结合margin或translate达到居中.*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>任意个元素(flex)</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"> <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line"> <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul><li><p>单行文本/行内/行内块</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多行文本/行内/行内块</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    line-height: 20px;//高度除以文本的行数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    font-size:0;//清除幽灵空白节点的BUG</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单个块级元素</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//方案一: table-cell</span><br><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    //缺点是设置table-cell的元素,宽高设置百分比无效,需要给他的父元素为table才生效.</span><br><span class="line">    //设置table-cell不感知margin,设置float或position会对布局造成破坏.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方案二: 绝对定位配合margin或translate</span><br><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">    //或margin-top: -XXX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方案三: margin: auto 0;</span><br><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: retive;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span><br><span class="line">    //原理是当top和bottom为0时,margin-top&amp;bottom会无限延伸沾满空间且平分.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方案四: flex</span><br><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    //或为son设置align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>任意个元素(flex)</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    //或为son设置align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><ul><li><p>行内/行内块/图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Table-cell</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="comment">/*text-align: center;*/</span> <span class="comment">/*如果子元素是行内元素则添加*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="comment">/*如果是块级元素则添加*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对定位</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: retive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">    <span class="comment">/*如果考虑兼容性问题的话可以使用margin*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绝对居中</p></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: retive;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当top&amp;bottom为0,margin-top&amp;bottom为无限延伸沾满空间并平分.left与right同上.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><h4 id="左定宽右自适应"><a href="#左定宽右自适应" class="headerlink" title="左定宽右自适应"></a>左定宽右自适应</h4><ul><li>float+margin</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>float+overflow</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>table的单元格自动分配</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>绝对定位</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用flex实现自适应.</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;<span class="comment">/*均分父元素剩余空间*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用grid</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto;<span class="comment">/*auto换成1fr也可以*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="一列不定-一列自适应"><a href="#一列不定-一列自适应" class="headerlink" title="一列不定,一列自适应"></a>一列不定,一列自适应</h4><ul><li>使用float+overflow实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;<span class="comment">/*只设置浮动,不设宽度*/</span></span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Grid实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: auto <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><h4 id="两列定宽-一列自适应"><a href="#两列定宽-一列自适应" class="headerlink" title="两列定宽,一列自适应"></a>两列定宽,一列自适应</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        左列定宽</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        中间定宽</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        右侧自适应</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>用float+margin实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>:<span class="number">310px</span>;<span class="comment">/*防止宽度过小,子元素换行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>float+overflow实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*其余样式与以上相同*/</span></span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>table-cell的单元格自动分配</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">    <span class="attribute">border-spacing</span>:<span class="number">10px</span>;<span class="comment">/*关键,设置间距*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用flex实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;<span class="comment">/*均分父元素剩余空间.*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Grid实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">200px</span> <span class="number">1</span>fr;<span class="comment">/*1fr或auto都可以*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   ####双飞翼布局(两侧定宽,中间自适应)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;<span class="comment">/*上移一行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;<span class="comment">/*向上移动自身的距离*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="圣杯布局方法"><a href="#圣杯布局方法" class="headerlink" title="圣杯布局方法"></a>圣杯布局方法</h4><ul><li>定位方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Grid方式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文本/行内/行内块&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="布局 css" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80-css/"/>
    
  </entry>
  
  <entry>
    <title>学习React</title>
    <link href="http://yoursite.com/2017/01/14/%E5%AD%A6%E4%B9%A0React/"/>
    <id>http://yoursite.com/2017/01/14/学习React/</id>
    <published>2017-01-14T03:12:17.000Z</published>
    <updated>2017-12-14T03:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>​    creat-react-app 脚手架安装</p><p>​    <code>npm install -g creat-react-app</code></p><p>​    初始化安装</p><p>​    <code>creat-react-app hello-react</code></p><p>​    启动</p><p>​    <code>cd hello-react</code></p><p>​    <code>npm start</code></p><h3 id="使用jsx"><a href="#使用jsx" class="headerlink" title="使用jsx"></a>使用jsx</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;hello React&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;header/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>jsx在编译时会变成相应的js对象描述.</p><p>react-dom负责把这个js对象描述变成dom元素并渲染.</p><h3 id="Reader方法"><a href="#Reader方法" class="headerlink" title="Reader方法"></a>Reader方法</h3><p>我们在编写组件时,需要继承react的Component,一个组件类必须实现一个render方法,这个方法返回一个jsx对象,需要注意的是,必须用一个外层的元素把所有内容包裹起来,而不能是几个元素.</p><h5 id="表达式插入"><a href="#表达式插入" class="headerlink" title="表达式插入"></a>表达式插入</h5><p>在jsx中可以插入js表达式,表达式返回的结果会渲染在页面上,表达式用{}包裹,如果包裹的是一个对象,在对象的外面也要加上{}.</p><p>{}内可以放任何js的代码.不仅仅可以放在标签内部,也可以放在标签属性上.</p><p><code>&lt;a className={className}/&gt;</code></p><p>因为class,和for是js关键字,所以在react中用className和htmlFor代替.</p><h5 id="条件返回"><a href="#条件返回" class="headerlink" title="条件返回"></a>条件返回</h5><p>我们可以根据不同的条件返回不同的jsx.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> isGood = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">    &#123;</span><br><span class="line">              isGood</span><br><span class="line">              ?<span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>isGood<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">              :<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>is bad<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要隐藏一个元素,返回一个null即可.</p><h5 id="jsx元素变量"><a href="#jsx元素变量" class="headerlink" title="jsx元素变量"></a>jsx元素变量</h5><p>jsx元素就是js对象,那么jsx元素其实可以像js对象一样赋值给变量,作为函数参数传递或作为函数返回值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作为变量</span></span><br><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> isGood = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">const</span> good = <span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>isGood<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">  <span class="keyword">const</span> bad = <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>isBad<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">    &#123;isGood?good:bad&#125;</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//作为函数参数传递</span></span><br><span class="line">renderGood(good,bad)&#123;</span><br><span class="line">  <span class="keyword">const</span> isGood = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> isGood?good:bad</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;<span class="keyword">this</span>.renderGood(<span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>isGood<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span>,&lt;span&gt;isBad&lt;<span class="regexp">/span&gt;)&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件的组合-嵌套和组件树"><a href="#组件的组合-嵌套和组件树" class="headerlink" title="组件的组合,嵌套和组件树"></a>组件的组合,嵌套和组件树</h3><p>自定义的组件必须用大写字母开头,普通html标签用小写字母开头.</p><p>组件之间可以组合,嵌套.就像普通的html标签一样使用就可以,这样组合嵌套最后构成一个组件树,来表示它们之间的关系.</p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>在react中监听事件甚至需要给监听的元素加上类似于<code>onClick</code>和<code>onKeyDown</code>这样的属性,紧跟的是一个表达式插入,这个表达式返回一个实例方法.</p><p>在react中不需要调用浏览器原生的addEventListener进行事件监听,react帮我们封装好了一系列的on*的属性,而且不用考虑不同浏览器之间的兼容问题.如果需要用到事件对象event,在函数中传入e参数即可,react把event对象也做了封装.</p><p>一般在某个类的实例方法中,this指的就是这个实例本身,但在react中,调用你传给它方法的时候,并不是通过对象方法的方式调用(this.handleclick),而是通过函数调用(handleClick),所以在事件监听函数中的this是null或undefined.<strong>当你想在函数中使用当前实例的时候,需要手动将实例方法bind到当前实例再传给react,这种方式在react中非常常见.</strong></p><p><strong>这些on*事件只能用在普通的html元素上,不能用在组件标签上</strong></p><h3 id="组件的state和setState"><a href="#组件的state和setState" class="headerlink" title="组件的state和setState"></a>组件的state和setState</h3><p>一个组件的显示形态是由它的数据状态和配置参数决定的.一个组件可以拥有自己的状态,就像一个点赞按钮,有点赞状态和未点赞状态,并可以再这两种状态之间来回切换.state就是存储这种可变化的状态的.改变状态时不能直接赋值,可以使用setState方法来改变状态.<strong>当我们调用setState时,react会更新组件状态,重新调用render方法,然后再把render方法所渲染的最新内容显示到页面上.state方法接受一个对象或函数作为参数</strong>如果我们用<code>this.state=XXX</code>,React就没办法知道你修改了组件的状态.</p><h5 id="state接收对象参数"><a href="#state接收对象参数" class="headerlink" title="state接收对象参数"></a>state接收对象参数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    name: <span class="string">'tom'</span>,</span><br><span class="line">    isLicked: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">handleClick()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">isLicked</span>: !<span class="keyword">this</span>.state.isLicked&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="state接收函数作为参数"><a href="#state接收函数作为参数" class="headerlink" title="state接收函数作为参数"></a>state接收函数作为参数</h5><p><strong>再调用setState时,react不会马上修改state,而是把这个对象放到一个更新队列中,稍后才回从多个队列中把新状态计算合并提取出来合并到state,再触发更新</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象作为参数</span></span><br><span class="line">handClick()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>:<span class="number">0</span>&#125;)<span class="comment">//this.state.count还是undefined</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count+<span class="number">1</span>&#125;)<span class="comment">//undefined+1=NaN</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>:<span class="keyword">this</span>.state.count+<span class="number">2</span>&#125;)<span class="comment">//NaN+2=NaN</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数作为参数可以接受一个参数作为上次setState的返回值</span></span><br><span class="line">handClick()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;<span class="comment">//0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>: prevState.count +<span class="number">1</span>&#125;<span class="comment">//0+1=1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>: prevState.count+<span class="number">2</span>&#125;<span class="comment">//1+2=3</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行3次setState,但组件只会渲染一次.因为react会把所有事件循环中的消息队列中的state合并再渲染.</span></span><br></pre></td></tr></table></figure><h3 id="配置组件的props"><a href="#配置组件的props" class="headerlink" title="配置组件的props"></a>配置组件的props</h3><p>一个组件可能在不同的地方用到,所以组件要有一定的可配置性.每个组件都可以接收一个props参数,他是一个对象,包含你对这个组件的配置.</p><p>组件内部是通过this.props的方式来获取组件的参数,如果this.props有需要的属性就采用,没有的话就默认.</p><p>再使用一个组件的时候,可以把参数放在标签中的属性中,所以属性都会作为props对象的键值.</p><h5 id="默认配置defaultProps"><a href="#默认配置defaultProps" class="headerlink" title="默认配置defaultProps"></a>默认配置defaultProps</h5><p>我们可以通过||操作符来实现默认配置,<code>const word = this.props.like || &#39;已赞&#39;</code>React也提供了一种方式defaultProps来配置默认配置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeBtn</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    like: <span class="string">'取消'</span>,</span><br><span class="line">    unlike: <span class="string">'点赞'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line"><span class="keyword">this</span>.state = &#123;<span class="attr">isLike</span>: <span class="literal">false</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="props不可变"><a href="#props不可变" class="headerlink" title="props不可变"></a>props不可变</h5><p>props一旦传入进来就不能改变.如果我们使用<code>this.props.like=&#39;取消&#39;</code>控制台会直接报错.</p><p>你不能改变一个组件被渲染时传进来的props,因为如果渲染过程中可以改变会导致组件的显示形态和行为变得不可预测.</p><p>但这并不意味这props永远不能修改,组件的使用者可以主动的通过重新渲染的方式把新的props传入到组件中.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"> &lt;LikeBtn like=&#123;<span class="keyword">this</span>.state.like&#125;&gt; </span><br><span class="line">    &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在这里,我们把state中的数据传给props,但我们点击按钮时,我们使用setState改变state的值,并导致页面重新渲染,改变后的state会传给新的props.</p><h3 id="state-VS-props"><a href="#state-VS-props" class="headerlink" title="state VS props"></a>state VS props</h3><p>state的主要作用是用于组件保存,控制,修改自己的状态.state在组件内部初始化,可以被自身修改,但不能被外界访问和修改.可以把state当做一个局部的只能被自身控制的数据源.通过this.setState进行更新,该方法会导致组件重新渲染.</p><p>props主要作用是可以传入参数来配置该组件,组件内部无法控制和修改,除非外部主动传入新的props,否则组件的props永远保持不变.</p><p>一个组件的state中的数据可以传给子组件的props,一个组件也可以使用外部传入的props来初始化自己的state.但他们职责非常清晰<strong>state是让组件控制自己的状态,props是让外部对组件自己进行配置,尽量少的用state,尽量多的使用props</strong></p><h5 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloWorld = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sayHi = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    alert(<span class="string">"helloWorld"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div onClick=&#123;sayHi&#125;&gt;helloWorld&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>以前的一个组件时通过继承Component来构建,一个子类就是一个组件,而用函数式编写方式是一个函数就是一个组件,你可以和之前使用<helloworld>使用该组件.不同的是,函数式组件只能接受props而无法和类组件一样在constructor里面初始化state.函数式组件就是一种只接受props和提供render方法的类组件.</helloworld></p><h3 id="渲染列表数据"><a href="#渲染列表数据" class="headerlink" title="渲染列表数据"></a>渲染列表数据</h3><h5 id="渲染存放jsx元素的数组"><a href="#渲染存放jsx元素的数组" class="headerlink" title="渲染存放jsx元素的数组"></a>渲染存放jsx元素的数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;[</span><br><span class="line">     &lt;span&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;,</span></span><br><span class="line"><span class="regexp">     &lt;span&gt;2&lt;/</span>span&gt;,</span><br><span class="line">     &lt;span&gt;<span class="number">3</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">     ]&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你往{}里放一个数组,react会把数组中的元素依次渲染出来.</p><h5 id="使用map渲染列表数据"><a href="#使用map渲染列表数据" class="headerlink" title="使用map渲染列表数据"></a>使用map渲染列表数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">userName</span>:<span class="string">'tom'</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">userName</span>:<span class="string">'jerry'</span>,<span class="attr">age</span>:<span class="number">23</span>,<span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">userName</span>:<span class="string">'lily'</span>,<span class="attr">age</span>:<span class="number">41</span>,<span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">userName</span>:<span class="string">'lucy'</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line">]</span><br><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> userEle = []<span class="comment">//保存渲染后的jsx数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> user <span class="keyword">of</span> users)&#123;</span><br><span class="line">    userEle.push(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;&#123;user.userName&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;&#123;user.age&#125;&lt;/</span>span&gt;</span><br><span class="line">      &lt;span&gt;&#123;user.gender&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div&gt;&#123;userEle&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/但我们一般不会手动写循环来构建jsx结构,而是用es6 的map方法</span></span><br><span class="line"><span class="regexp">render()&#123;</span></span><br><span class="line"><span class="regexp">  return(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      users.map((user,index,arr)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">      return(</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span&gt;&#123;&#123;user.userName&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;user.age&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123;user.gender&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你会发现,react报错了,因为<strong>对于用表达式套数组罗列到页面上的元素,都要为每个元素加上key属性,这个key必须是每个元素的标识</strong></p><h3 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h3><p>在编写组件时,当有别的组件依赖或影响某个组件的某个状态state时,我们通常将这种组件之间共享的状态交给组件最近的公共父节点保管,然后通过props把状态传递给子组件,这样就可以在组件之间共享数据了.这种方式在React中被称为<strong>状态提升</strong>.</p><p>如果这个公共的分组件只是组件树下很小的一个子树,我们需要一直把状态提升上去,一旦发生提升,就需要修改原来保存状态以及传递数据的所有代码,这种无限制的提升并不是一个好的方案.</p><p><strong>如何更好的管理被多喝组件依赖的状态?</strong>React并没有提供更好的解决方案,我们可以引入Redux状态管理工具来帮助我们解决这种共享状态.对于不会被外界依赖和影响的状态,一般只保存在组件内部即可,不需要做提升.</p><h3 id="挂载阶段组件的生命周期"><a href="#挂载阶段组件的生命周期" class="headerlink" title="挂载阶段组件的生命周期"></a>挂载阶段组件的生命周期</h3><p>我们来看看下面这段代码发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Header/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//1.实例化一个Header</span></span><br><span class="line"><span class="keyword">const</span> header = <span class="keyword">new</span> Header(props,children)</span><br><span class="line"><span class="comment">//2.调用header.render</span></span><br><span class="line"><span class="keyword">const</span> headerJsx = header.render()</span><br><span class="line"><span class="comment">//3.构建真正的DOM元素</span></span><br><span class="line"><span class="keyword">const</span> headerDom = createDOM(...)</span><br><span class="line"><span class="comment">//4. 把DOM元素追加到页面上</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'root'</span>).appendChild(headerDOm)</span><br></pre></td></tr></table></figure><p>上面这个过程称为<strong>组件的挂载,这是一个从无到有的过程</strong></p><p>React为了更好的掌握组件的挂载过程,提供了一系列等生命周期函数.包括了两个挂载函数.</p><p><code>componentWillMount</code>和<code>componentDIdMount</code>.当我们在页面渲染后删除了某个元素后,也有对应的函数<code>componentWillUnmount</code>.</p><p>他们之间的顺序为</p><pre><code>1. constructor  (指向prototype对象所在的构造函数,关于组件自身状态的初始化)2. component will mount (组件将要挂载,一般组件启动的动作,包括ajax数据的拉取,设置定时器等等在此进行)3. render (返回jsx元素)4. component did mount (组件已经挂载,当组件的启动工作依赖dom时,例如动画,就可以放在这里.)5. component will unmount (组件将要移除,在组件销毁时清除该组件定时器和其他数据清理工作)</code></pre><h3 id="更新阶段的组件生命周期"><a href="#更新阶段的组件生命周期" class="headerlink" title="更新阶段的组件生命周期"></a>更新阶段的组件生命周期</h3><p>除了挂载阶段,还有一种更新阶段.setState导致react重新渲染组件就是一个组件的变化过程.</p><ol><li><code>shouldComponentUpdate(nextProps,nextState)</code>: 你可以通过这个方法控制组件是否重新渲染,如果返回false就不重新渲染,该生命周期在性能优化上非常有用.</li><li><code>componentWillReceiveProps(nextProps)</code>:组件从父组件接收到新的<code>props</code>之前调用.</li><li><code>componentWillUpdate()</code>:组件重新渲染之前调用.</li><li><code>componentDIdUpdate()</code>:重新渲染后调用.</li></ol><h3 id="ref-和-React-中的-DOM-操作"><a href="#ref-和-React-中的-DOM-操作" class="headerlink" title="ref 和 React 中的 DOM 操作"></a>ref 和 React 中的 DOM 操作</h3><p>React中我们很少和打交道,有一系列的on*方法帮我们进行事件监听,我们不再需要调用addEventListener的DOM API,我们通过setState重新渲染组件,渲染时把新的props传给子组件达到页面更新效果,而不再借用jQuery进行页面更新.</p><p>但React并不能满足所有的DOM操作,比如进入页面自动focus到某个输入框,.比如你想获取某个元素的尺寸在做后续动画等等.所以它提供了<code>ref</code>属性帮助我们获取已经挂在的dom节点,你可以给某个JSX元素加上ref属性.</p><p><code>&lt;input ref={(input)=&gt;{this.input = input}}&gt;</code></p><p>我们给input加了一个ref属性,该属性是一个函数,该元素在页面上挂载完毕后调用这个函数,并把这个挂载后的dom节点传给这个函数.我们把元素赋值给组件实例的一个属性,这样就可以通过this.input获取这个DOM元素.</p><p>如果给组件挂载ref,那么我们获取的是这个组件在react内部初始化的实例,这并不常用,不建议这样做.</p><h3 id="props-children-和容器类组件"><a href="#props-children-和容器类组件" class="headerlink" title="props.children 和容器类组件"></a>props.children 和容器类组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Card&gt;</span><br><span class="line">  &lt;h1&gt;I<span class="string">'m H1&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;I'</span>m Div&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Card&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">    &#123;<span class="keyword">this</span>.props.children[<span class="number">0</span>]&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在使用自定义组件时,可以再组件内部嵌套jsx结构.嵌套的结构可以再组件内部通过props.children获取到,这种组件编写方式在编写容器类型的组件当中非常有用,而在实际React项目中,我们几乎每天都需要用这种方式编写组件.</p><h3 id="dangerouslySetHTML-和-style-属性"><a href="#dangerouslySetHTML-和-style-属性" class="headerlink" title="dangerouslySetHTML 和 style 属性"></a>dangerouslySetHTML 和 style 属性</h3><p>#####dangerouslySetHTML</p><p>出于安全因素(XSS攻击),React会把所有表达式插入的内容都自动转义.类似于jQuery的text().</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> header = <span class="string">'&lt;h1&gt;helloWorld&lt;/h1&gt;'</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line"> &#123;header&#125; </span><br><span class="line"> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/因为react的自动转义,并不会渲染&lt;h1&gt;元素,而是显示文本形式</span></span><br></pre></td></tr></table></figure><p>如何做到动态设置HTML效果呢?我们可以给元素设置一个<code>dangerouslySetHTML</code>属性传入一个对象,这个对象的<code>__html</code>属性值就相当于<code>innerHTML</code>,就可以动态渲染元素结构了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div </span><br><span class="line">dangerouslySetHTML=&#123;&#123;<span class="attr">__html</span>:<span class="string">'&lt;h1&gt;helloworld&lt;/h1&gt;'</span>&#125;&#125;</span><br><span class="line">className=<span class="string">"container"</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br></pre></td></tr></table></figure><p>之所以搞这么复杂是因为设置这个属性可能会导致跨站脚本攻击,不必要的情况就不要使用.</p><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><p>普通DOM元素中的style</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"font-size:14px;color:red;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>React中需要把css属性变为对象再传给元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;<span class="attr">fontSize</span>:<span class="string">'14px'</span>,<span class="attr">color</span>:<span class="string">'red'</span>&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>style接收一个对象,里面是css属性键值对,原来css带’-‘的属性都需要换成驼峰命名法.我们可以用props或者state中的数据生成样式对象再传给元素,再用setState修改样式,非常灵活.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;<span class="attr">fontSize</span>:<span class="string">'14px'</span>,<span class="attr">color</span>:<span class="keyword">this</span>.state.color&#125;&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="PropTypes和组件参数验证"><a href="#PropTypes和组件参数验证" class="headerlink" title="PropTypes和组件参数验证"></a>PropTypes和组件参数验证</h3><p>React提供一种机制,可以给组件的配置参数加上类型验证.我们需要安装React提供的第三方库<code>prop-types</code></p><p><code>npminstall --save prop-types</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    text: PropTypes.string.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PropTypes提供的参数有:array,bool,func,number,object,string,node,element…</p><h3 id="react规范组件和方法命名"><a href="#react规范组件和方法命名" class="headerlink" title="react规范组件和方法命名"></a>react规范组件和方法命名</h3><pre><code>1. static开头的类属性,如`defaultProps`,`propTypes`2. 构造函数,constructor3. getter/setter4. 组件生命周期5. _开头的私有方法6. 事件监听方法,handle**7. render*()表示不同render()内容的函数</code></pre><h3 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h3><p>高阶组件就是一个函数,传给它一个组件作为函数的参数,它返回一个新的组件.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (OldComponent,name)=&gt;&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">NewComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">super</span>()</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;<span class="attr">data</span>:<span class="literal">null</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">      <span class="keyword">let</span> data = localStorage.getItem(name)</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;data&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">OldComponent</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">OldComponent</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> NewComponent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么使用这个高阶组件呢?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NewComponent <span class="keyword">from</span> <span class="string">'./NewComponent'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputName</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.props.data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">InputName = NewComponent(InputName,'username')</span></span><br><span class="line"><span class="xml">export default InputName</span></span><br></pre></td></tr></table></figure><p>其实高阶组件就是为了组件之间的代码复用.组件可能有着相同的逻辑,把这些逻辑抽取出来,放在高阶组件里进行复用.高阶组件内部包装的组件和被包装的组件通过props传递数据.</p><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>context(上下文)是React中一个比较特殊的东西.某个组件只要往自己的context里面放一些状态,这个组件下的所有子组件都可以直接访问而不用通过中间组件一层层传递,它的父组件则不能访问到.</p><p>context打破了组件之间通过props传递数据的规范,增强了组件间的耦合性.就像全局变量一样,每个组件都能随意访问和修改,这会让程序运行不可预料.</p><p>一些第三方状态管理的库就是充分利用了这种机制给我们提供了极大地便利,所以我们一般不手写context,也不要用它,需要时用这些第三方的应用状态管理库即可.</p><p>本文参考<a href="http://huziketang.com/books/react/lesson1" target="_blank" rel="external">胡子大哈的React小书,详情请点击</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;​    creat-react-app 脚手架安装&lt;/p&gt;
&lt;p&gt;​    &lt;code&gt;npm install -g creat-reac
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 React" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-React/"/>
    
  </entry>
  
  <entry>
    <title>用NodeJS写一个爬虫</title>
    <link href="http://yoursite.com/2016/12/05/%E7%94%A8NodeJS%E5%86%99%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2016/12/05/用NodeJS写一个爬虫/</id>
    <published>2016-12-05T07:45:03.000Z</published>
    <updated>2017-12-05T07:51:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>用NodeJS下一个爬虫,用来获取简书首页的文章,然后保存以txt文件的形式保存在本地,数量为20篇.</p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>​   npm init || yarn init</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>​   npm install superagent cheerio —save || yarn add superagent cheerio</p><h4 id="页面数据下载"><a href="#页面数据下载" class="headerlink" title="页面数据下载"></a>页面数据下载</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"superagent"</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">let</span> reptileUrl = <span class="string">"http://www.jianshu.com/"</span></span><br><span class="line"></span><br><span class="line">request</span><br><span class="line">    .get(reptileUrl)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> $ = cheerio.load(res.text,&#123;<span class="attr">decodeEntities</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">            <span class="comment">//每页有20篇文章,找到标题及其href的值</span></span><br><span class="line">            $(<span class="string">"#list-container .note-list li"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> url = $(v).find(<span class="string">".title"</span>).attr(<span class="string">"href"</span>)</span><br><span class="line">              <span class="comment">//url即文章的链接,需要和reptileUrl拼接起来</span></span><br><span class="line">              getContent(url)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="获取文章内容-保存在本地"><a href="#获取文章内容-保存在本地" class="headerlink" title="获取文章内容,保存在本地"></a>获取文章内容,保存在本地</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> adress = reptileUrl + url</span><br><span class="line">  request</span><br><span class="line">    .get(adress)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> $ = cherrio.load(res.text,&#123;<span class="attr">decodeEntities</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">          <span class="comment">//文章标题</span></span><br><span class="line">          <span class="keyword">let</span> title = $(<span class="string">".article .title"</span>).text()</span><br><span class="line">          <span class="comment">//文章内容</span></span><br><span class="line">          <span class="keyword">let</span> content = <span class="string">''</span></span><br><span class="line">          $(<span class="string">".article .show-content p"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, v, a</span>) </span>&#123;</span><br><span class="line">             content += $(v).text();</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">//要写入的数据</span></span><br><span class="line">          <span class="keyword">let</span> data = &#123;</span><br><span class="line">            title: title,</span><br><span class="line">            content: content</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//本地保存</span></span><br><span class="line">          fs.writeFile(<span class="string">'../data/'</span> + title + <span class="string">'.txt'</span>, <span class="built_in">JSON</span>.stringify(data), <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"It's OK !"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;用NodeJS下一个爬虫,用来获取简书首页的文章,然后保存以txt文件的形式保存在本地,数量为20篇.&lt;/p&gt;
&lt;h4 id=&quot;初始化项目&quot;
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="node 爬虫" scheme="http://yoursite.com/tags/node-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>鼓楼,什刹海随拍</title>
    <link href="http://yoursite.com/2016/10/13/%E9%BC%93%E6%A5%BC,%E4%BB%80%E5%88%B9%E6%B5%B7%E9%9A%8F%E6%8B%8D/"/>
    <id>http://yoursite.com/2016/10/13/鼓楼,什刹海随拍/</id>
    <published>2016-10-13T10:19:50.000Z</published>
    <updated>2017-12-26T06:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_0824.JPG" alt="鼓楼"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_0825.JPG" alt="北海公园"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_0826.JPG" alt="白塔"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1162.JPG" alt="恭王府"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oy299xjr2.bkt.clouddn.com/IMG_0824.JPG&quot; alt=&quot;鼓楼&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy299xjr2.bkt.clouddn.com/IMG_0825.JPG&quot; alt=&quot;北
      
    
    </summary>
    
      <category term="旅行" scheme="http://yoursite.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="http://yoursite.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Git 工作流</title>
    <link href="http://yoursite.com/2016/06/08/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Git-%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>http://yoursite.com/2016/06/08/深入理解Git-工作流/</id>
    <published>2016-06-08T01:46:52.000Z</published>
    <updated>2018-06-08T01:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-工作流"><a href="#git-工作流" class="headerlink" title="git 工作流"></a>git 工作流</h1><h3 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h3><p>集中式工作流以中央仓库作为项目所有修改的单点实体。相比SVN缺省的开发分支trunk，Git叫做master，所有修改提交到这个分支上。本工作流只用到master这一个分支。要发布修改到正式项目中，开发者要把本地master分支的修改『推』到中央仓库中。这相当于svn commit操作，但push操作会把所有还不在中央仓库的本地提交都推上去。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li>初始化一个空仓库 <code>git init --bare /XX.git</code></li><li>员工A和B克隆中央仓库 <code>git clone /xxx.git</code></li><li>A开发功能 <code>Git status， Git add ， Git commit</code>这些命令都是在本地提交，可以 反复操作多次，不用担心中央仓库。</li><li>B开发功能 <code>Git status， Git add ， Git commit</code></li><li>A 发布功能 <code>git push origin master</code> origin是 A 在科隆仓库时git创建的远程中央仓库别名。master参数告诉git推送的分支。</li><li>B 发布功能 <code>git push origin master</code>时 B的本地历史和中央仓库有分歧，提交失败。如果要避免这种情况，B要先 pull A的更新到他的本地仓库合并上他的本地修改，再push。</li><li>B在 A的提交之上 rebase。 B用 git pull 合并上游的修改到自己仓库，类似于SVN的 update。命令如下：<code>git pull -rebase origin master</code>。 –rebase告诉git 把B的提交移到中央仓库的master分支顶部。如果你忘记这个选项，pull仍然可以完成，但是每次pull操作要同步中央仓库中别人修改时，提交历史会以一个多余的’合并提交‘结尾。对于集中式工作流最好还是使用 –rebase 选项。</li><li>B解决合并冲突。执行<code>git rebase —abort</code>可以回到执行<code>git pull —rebase</code>之前的样子。</li><li>B成功发布功能。 <code>git push origin master</code></li></ol><h3 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h3><p>功能分支工作流以集中式工作流为基础，不同的是为各个新功能分配一个专门的分支去开发。这样可以把新功能集成到正式项目前，用pull Request 的方式讨论变更。功能分支应该有一个描述性的名字，比如<code>animated-menu-items</code>或<code>issue-#1061</code>，可以让分支有个清楚的用途。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ol><li>A在开发新功能之前，建立一个独立的分支。<code>git checkout -b xxx master</code> 这个命令检出一个基于 master 的名为xxx分支，git -b 选项表示如果不存在就新建分支。然后老规矩 <code>git status/add/commit</code></li><li>去吃午饭前，push功能分支到中央仓库是很好的做法，方便备份和开发协作。<code>git push -u origin xxx</code> -u选项表示设置本地分支去跟踪远程对于的分支，设置以后，A就可以使用<code>git push</code> 省去指定推送分支的参数。</li><li>A回来之后，完成了整个功能的开发，在合并master之前，A发起了一个pull Request 让团队其他人知道功能已经完成。然后请求合并到master。</li><li>B收到pull Request 会查看XXX分支的修改，决定在合并到正式项目前是否还要修改，且通过pull Request和A进行讨论。</li><li>A 再次修改，编辑，暂存，提交并push到中央仓库，A的活动都会显示在pull Request上。B如果有需要也可以吧XXX分支拉到本地，自己修改，他的提交也会在pull Request上。</li></ol><h3 id="Git-flow-工作流"><a href="#Git-flow-工作流" class="headerlink" title="Git flow 工作流"></a>Git flow 工作流</h3><p>Gitflow工作流定义了一个围绕项目发布的严格分支模型。虽然比功能分支工作流复杂几分，但提供了用于一个健壮的用于管理大型项目的框架。Gitflow工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。</p><h4 id="历史分支"><a href="#历史分支" class="headerlink" title="历史分支"></a>历史分支</h4><p>Gitflow工作流使用2个分支来记录项目的历史。master分支存储了正式发布的历史，而develop分支作为功能的集成分支。</p><h4 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h4><p>功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。当新功能完成时，合并回develop分支。新功能提交应该从不直接与master分支交互。</p><h4 id="发布分支"><a href="#发布分支" class="headerlink" title="发布分支"></a>发布分支</h4><p>一旦develop分支上有了做一次发布的，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上。这个分支只应该做Bug修复、文档生成和其它面向发布任务。一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。常用的分支约定：用于新建发布分支的分支（develop），用于合并的分支（master），分支命名（relese-X或 relese/X）</p><h4 id="维护分支"><a href="#维护分支" class="headerlink" title="维护分支"></a>维护分支</h4><p>维护分支或是热修复（hotfix）分支用于生成快速给产品发布版本打补丁，这是唯一可以从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ol><li>创建开发分支。为master分支配套一个develop分支。简单来做可以本地创建一个空的develop分支，push到服务器上。<code>git branch develop</code>，<code>git push -u origin develop</code>,以后这个分支会包含项目的全部历史，而master分支只包含部分历史，其他开发者应该克隆中央仓库，建好develop分支跟踪分支。<code>git clone XXX.git</code>,<code>git checkout -b develop origin/develop</code></li><li>A 和 B 开始开发新功能。新分支应基于develop。<code>git checkout -b xxx develop</code>.然后 <code>git status/add/commit…</code></li><li>A完成功能开发，合并到他本地的develop分支后push到中央仓库。<code>git pull origin develop</code>,<code>git checkout develop</code>,<code>git merge xxx</code>,<code>git push</code>,<code>git branch -d xxx</code></li><li>A 开始准备发布，他用一个新的分支做发布准备，这一步也确定了发布的版本号。<code>git checkout -b release-0.1 develop</code>。这个分支是清理发布，执行测试，更新文档等用于改善发布的分支。</li><li>A 完成发布，一旦准备好对外发布，A合并并修改master分支和develop分支，删除发布分支。合并回develop分支很重要。发布分支是作为功能开发（develop）和对外发布（master）之间的缓冲。只要合并到master，就应该打好tag方便跟踪。</li><li>用户发现bug。 为了处理bug，A从master分支拉出一个维护分支，提交修改解决问题。然后直接合并到master分支，还有，这些信息需要包含到develop分支中。然后安全的删除这个维护分支。</li></ol><h3 id="forking工作流"><a href="#forking工作流" class="headerlink" title="forking工作流"></a>forking工作流</h3><p>forking工作流是分布式工作流，充分利用 git 在分支上的优势,可以安全的管理可靠的开发者,并且可以接受不信任的贡献者的提交.这种工作流不是使用单个服务器的中央仓库代码基线,而是让每个开发者都有一个仓库.每个代码贡献者由两个Git 仓库,一个是本地私有的,另一个服务端公开的.Forking 的优势还有,不需要所有人都能 push代码到中央仓库中,开发者 push 到自己的服务端仓库,而只有项目维护者才能 push 到正式仓库.这也成为了开源项目的理想工作流.</p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p>和其他的 Git 工作流一样, Forking 工作流要先有一个公开的正式仓库存储在服务器上.但一个新的开发者想在项目上工作时,不是直接从正式仓库克隆,而是 fork 正式项目在服务器上创建一个拷贝.这个拷贝作为他个人公开仓库,其他开发者不允许 push 到这个仓库,但可以 pull 到修改.创建自己的服务器拷贝后就可以和往常一样执行 git clone 了.提交本地修改时, 提交到自己的公开仓库中,然后给正式仓库发起一个 pull request, 让项目维护者知道有新的集成了.维护者同意变更后会合并变更到自己本地的 master 中,然后 push master 分支到服务器的正式仓库中.</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><ol><li><p>开发者 fork 正式仓库</p></li><li><p>开发者克隆自己 fork 出来的仓库</p><p>相比用 origin 远程别名指向中央仓库, forking 需要2个远程别名,一个指向正式仓库,一个指向自己的服务端仓库.常见约定使用 origin 作为远程克隆的仓库别名, upstream 作为正式仓库的别名.</p></li><li><p>开发者开发自己的功能</p></li><li><p>开发者发布自己的功能</p><p>push 代码到自己的公开仓库,发起 pullRwquest 指定要合并的分支.一般是上游( upstream)的 master 分支</p></li><li><p>项目维护者集成开发者的功能</p><p>项目维护者收到 pull request, 他有两种方式,一是直接在 pull request 中查看代码,二是 pull 代码到自己的本地仓库,再手动合并.如果出现合并冲突,需要用第二种方式解决.</p></li><li><p>开发者和正式仓库做同步</p></li></ol><p>由于正式仓库更新,其他开发需要和正式仓库同步,<code>git pull upstream master</code>.</p><h3 id="pull-Request"><a href="#pull-Request" class="headerlink" title="pull Request"></a>pull Request</h3><p>Pull Request 可以让开发者更方便的进行协作,可以再代码合并之前对修改进行讨论.如果变更有任何问题,团队成员反馈在 PR 中,所有的这些活动都直接跟踪在 PR 中.</p><p>PR 需要提供4个信息以发起 pull Request: 源仓库,源分支,目的仓库,目的分支. PR 可以和以上的 git 工作流一起使用,基本过程是这样的:</p><ol><li>开发者在本地仓库新建一个分支开发功能.</li><li>开发者 push 分支修改到公开的仓库中.</li><li>开发者通过公开的仓库发起一个 pull request</li><li>项目的其他成员 review code ,讨论并修改</li><li>项目维护者合并功能到官方仓库中并关闭 pull requset</li></ol><h3 id="GIt-Flow-插件的使用"><a href="#GIt-Flow-插件的使用" class="headerlink" title="GIt Flow 插件的使用"></a>GIt Flow 插件的使用</h3><h4 id="git-flow-的简单介绍"><a href="#git-flow-的简单介绍" class="headerlink" title="git flow 的简单介绍"></a>git flow 的简单介绍</h4><p>git flow 是构建在 git 之上的一个组织软件开发活动的模型,是在 Git 之上构建的一项软件开发最佳实践,也是一套使用 Git 进行源代码管理的一套行为规范和简化部分 git 操作的工具.总之, git flow 就是通过在一个项目里划分不同的分支,来实现功能开发, bug 修复,版本发布,以及代码冲突处理等.</p><h4 id="git-flow-把分支划分了几个类别"><a href="#git-flow-把分支划分了几个类别" class="headerlink" title="git flow 把分支划分了几个类别"></a>git flow 把分支划分了几个类别</h4><ul><li>Master (稳定无 BUG 发布版)</li><li>Develop (功能开发最前线)</li><li>Feature (为每一个新功能从 Develop 创建出来的分支)</li><li>Hotfix (紧急修复 BUG)</li><li>Release (版本发布,项目上线前的一些全面测试以及准备,同时也肩负版本归档,回滚支持)</li></ul><h3 id="git-flow-插件的常用命令"><a href="#git-flow-插件的常用命令" class="headerlink" title="git flow 插件的常用命令"></a>git flow 插件的常用命令</h3><p>(feature 版本)</p><ul><li>切换到相应目录 cd ..</li><li>查看分支  git branch -a</li><li>切换到相应分支 git checkout develop</li><li>初始化   git flow init  (-f)</li><li>新建分支  git flow feature start xxx develop(基于创建的分支)</li><li>发布分支  git flow feature publish</li><li>操作  git add .  /  git status / git commit -m “feat: XXX”/git push</li><li>结束分支  git flow feature finish XXX</li><li>取得一个发布的新特性分支  git flow feature pull origin XXX</li><li>跟踪在 origin 上的特性分支 git flow feature track XXX</li></ul><p>(release版本)</p><ul><li>开始准备 release 版本  git flow release start RELESE [BASE 参数]</li><li>创建后发布 git flow release publish RELESE</li><li>签出远程变更 git flow release track RELESE</li><li>完成release 版本  git flow release finish RELEASE</li></ul><p>(hotfix 版本)</p><ul><li>开始紧急修复 git flow hotfix start version [BASENAME 版本号]</li><li>完成紧急修复 git flow hotfix finish VERSION</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-工作流&quot;&gt;&lt;a href=&quot;#git-工作流&quot; class=&quot;headerlink&quot; title=&quot;git 工作流&quot;&gt;&lt;/a&gt;git 工作流&lt;/h1&gt;&lt;h3 id=&quot;集中式工作流&quot;&gt;&lt;a href=&quot;#集中式工作流&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>[阮一峰ES6标准]学习笔记</title>
    <link href="http://yoursite.com/2016/03/21/%E9%98%AE%E4%B8%80%E5%B3%B0ES6%E6%A0%87%E5%87%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/21/阮一峰ES6标准-学习笔记/</id>
    <published>2016-03-21T02:43:25.000Z</published>
    <updated>2017-12-21T02:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>let声明的变量只在代码块内有效</li><li>不存在变量提升</li><li>let声明变量之前,该变量都是不可用的,称为暂时性死区</li><li>相同作用域内不允许重复声明同一个变量</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>const声明一个只读的常量,一旦声明,常量的值不能改变.</li><li>const一旦声明变量,必须初始化,不赋值就会报错.</li><li>const保证的其实是保存变量的内存地址不得改动.对于简单数据类型,值就保存在变量指向的内存地址,等同于常量.对于复合类型的数据,变量指向的地址保存的是一个指针.</li><li>var和function声明的全局变量,是顶层对象的属性.而let,const,class声明的全局变量不再属于顶层对象.</li></ul><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><p>从数组和对象中提取值,对变量进行赋值,这就称为解构.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//a=1,b=2,c=3</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>] <span class="comment">//解构不成功变量值为undefined</span></span><br></pre></td></tr></table></figure><p>如果等号右边不是数组(或不是可遍历的解构),会报错.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a] = <span class="literal">false</span>;<span class="comment">//false不是可遍历解构,报错</span></span><br></pre></td></tr></table></figure><p>解构赋值允许指定默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b=<span class="number">666</span>] = [<span class="number">1</span>]<span class="comment">//a=1,b=666</span></span><br></pre></td></tr></table></figure><p>对象也可以用于解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'a'</span>,<span class="attr">bar</span>:<span class="string">'b'</span>&#125;;<span class="comment">//foo='a',bar='b'</span></span><br><span class="line"><span class="comment">//属性名相同才能取到值</span></span><br><span class="line"><span class="keyword">let</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'a'</span>,<span class="attr">baszz</span>:<span class="string">'b'</span>&#125;;<span class="comment">//bar为undefined</span></span><br><span class="line"><span class="comment">//&#123;foo&#125;其实就是&#123;foo:foo&#125;的简写</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>:bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'a'</span>&#125;<span class="comment">//bar='a',foo未定义</span></span><br><span class="line"><span class="comment">//对象解构赋值也可以指定默认值</span></span><br><span class="line"><span class="keyword">let</span> &#123;x,y=<span class="number">3</span>&#125;=&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;<span class="comment">//x=1,y=3</span></span><br></pre></td></tr></table></figure><p>字符串也可用于解构赋值,因此此时,字符串被转换为一个类似数组的对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">'hello'</span>;<span class="comment">//a='h',b='e'</span></span><br></pre></td></tr></table></figure><p>函数的参数也可用于解构赋值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x,y=<span class="number">3</span>]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add([<span class="number">1</span>,<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h3 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h3><p>ES6为字符串添加了便利器接口,使得字符串可以被for…of循环遍历.</p><p>ES5有indexOf用来确定一个字符串是否在另一个字符串中.</p><p>ES6又提供了三种方法:</p><ul><li>includes():返回布尔值,表示是否找到了参数字符串</li><li>startsWith():返回布尔值,表示是否在原字符串的头部</li><li>endsWith():返回布尔值,表示是否在原字符串的尾部</li></ul><p>这三个方法都提供了第二个参数,表示搜索的位置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s =<span class="string">"hello World"</span></span><br><span class="line">s.includes(<span class="string">"hello"</span>)<span class="comment">//true</span></span><br><span class="line">s.startsWith(<span class="string">"hel"</span>)<span class="comment">//true</span></span><br><span class="line">s.endsWith(<span class="string">"rld"</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>repeat()</strong>方法返回一个新字符串,表示将元字符串重复n次.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>);<span class="comment">//'hellohello'</span></span><br></pre></td></tr></table></figure><p>模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'world'</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">`hello <span class="subst">$&#123;s&#125;</span> !`</span><span class="comment">//a='hello world !'</span></span><br></pre></td></tr></table></figure><p><code>${}</code>里面不仅可以嵌入变量,还可以嵌入函数.</p><h3 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h3><ul><li>Number.isFinite()用来检查一个数值是否为有限的(finite)</li><li>Number.isNaN()用来检查一个数值是否为NaN.</li><li>上面两个方法与传统的全局方法isFinite()和isNaN()的区别在于,传统方法会先调用Number()将非数值转换为数值在判断,新的两个方法只对数值有效,非数组一律返回false.</li><li>Number.parseInt();</li><li>Number.parseFloat();将全局方法移植到Number对象上,使语言逐步模块化.</li><li>Number.isInteger();用来判断一个值是否为整数.</li><li>指数运算符,例如<code>2**3===8;</code></li></ul><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><p>函数参数的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x,y=<span class="string">'world'</span></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">'hello'</span>)<span class="comment">//hello world</span></span><br><span class="line"><span class="comment">//参数是默认声明的,所以不能用let和const再次声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x=<span class="number">5</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;<span class="comment">//error</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">2</span>;<span class="comment">//error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>rest参数</strong></p><p>ES6引入rest参数,用于获取函数的多余参数,rest参数搭配的变量是一个数组,该变量将多余的参数放入数组中.rest参数只能是最后一个参数,否则会报错.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">...values</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> val <span class="keyword">of</span> values)&#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>函数的name属性返回该函数的函数名.</p><p><strong>箭头函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span>=&gt;</span> v;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span>=&gt;</span><span class="number">5</span>;<span class="comment">//没有参数或多个参数用()包括,多个函数语句用&#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>箭头函数内的this是定义时所在的对象,不是使用时的对象</li><li>不可以当做构造函数</li><li>不可以使用arguments对象</li><li>不可以使用yield命令,不能作为Generator函数</li><li>箭头函数中的this的指向是固定的,不可变的.</li></ul><p><strong>尾调用</strong>就是在函数的最后一步调用另外一个函数.</p><p><strong>尾递归</strong>函数在最后一步调用自身就是尾递归.尾递归不会发生栈溢出,相对节省内存.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorrial</span>(<span class="params">n,total</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n<span class="number">-1</span>,n*total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式编程有一个概念,叫做柯里化,意思就是将多参数的函数转换成单参数的函数形式.</p><h3 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h3><p><strong>扩展运算符</strong>是三个点<code>...</code>.它好比rest参数的逆运算,将一个数组转为用逗号分隔的参数序列.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure><p>由于扩展运算符可以展开数组,所以不再需要<code>apply</code>方法将数组转为函数的函数了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y,z</span>)</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">f.apply(<span class="literal">null</span>,args)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x,y,z</span>)</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">f(...args)</span><br></pre></td></tr></table></figure><p>扩展运算符的应用</p><ul><li>复制数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">cionst a2 = [...a1]</span><br></pre></td></tr></table></figure><ul><li>合并数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">arr1.concat(arr2,arr3)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">[...arr1,...arr2,...arr3]</span><br></pre></td></tr></table></figure><ul><li>字符串转为数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">"hello"</span>]<span class="comment">//['h','e','l','l','o']</span></span><br></pre></td></tr></table></figure><ul><li>只要是有Iterator接口的对象都可以用扩展运算符转为数组.</li></ul><p><strong>Array.from()</strong>将类似数组的对象和可遍历对象转换为真正的数组.</p><p>扩展运算符转换为数组调用的是遍历器接口Iterator,Array.from()不仅可以支持可遍历对象还支持类似数组的对象,既任何拥有length属性的对象都可以通过Array.from转换为数组,而扩展运算符不行.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;<span class="string">'0'</span>:<span class="string">'a'</span>,<span class="string">'1'</span>:<span class="string">'b'</span>,<span class="attr">length</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike)</span><br></pre></td></tr></table></figure><p><strong>Array.of()</strong>用于将一组值转换为数组.因为Array()和new Array(),由于参数不同导致行为不统一.一个参数指定数组的长度,不少于两个才能组成新数组,这样会导致行为有差异.Array.of()基本可以替代Array()和new Array().</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p><strong>find()</strong>用于找出第一个符合条件的数组成员.他的第一个参数是一个回调函数,所有成员依次执行该函数,直到找到第一个为true的成员,没有找到返回undefined.该回调函数一个接受3个参数,分别是value,index,arr.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">-5</span>,<span class="number">10</span>].find(<span class="function">(<span class="params">n</span>)=&gt;</span>&#123;n&lt;<span class="number">0</span>&#125;)<span class="comment">//-5</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">-5</span>,<span class="number">10</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span></span><br><span class="line">&#125;)<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p><strong>findIndex()</strong>与find()用法类似,用于找出符合条件成员的索引,都不符合返回-1.由于数组的IndexOf方法无法识别数组的NaN成员,而find和findIndex弥补了数组indexOf的不足.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">4</span>,<span class="number">-5</span>,<span class="number">10</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value === <span class="number">4</span>;<span class="comment">//1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>fill()</strong>填充一个数组.接受第二和第三个参数分别为起始位置和结束位置之前.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//['a',7,'c']</span></span><br></pre></td></tr></table></figure><p><strong>entries(),keys(),values()</strong>都返回一个遍历器对象,可以用for…of进行遍历.entries()是对键值对的遍历,keys()是对键名的遍历,values()是对值得遍历.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>,<span class="string">'b'</span>].keys())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);<span class="comment">//0  //1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组的includes()</strong>返回一个布尔值表示数组是否包含给定的值,与字符串的includes()方法类似.另外Map和Set数据结构有一个has方法,需要注意与includes区分.Map的has用来查找key,Set的has用来查找value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">3</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><p><strong>属性的简写形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">x</span>:x,<span class="attr">y</span>:y&#125;;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;x,y&#125;</span><br></pre></td></tr></table></figure><p><strong>属性名表达式</strong></p><p>ES6允许字面量定义对象时,用表达式作为对象的属性名.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'foo'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [name]: <span class="string">'foo'</span>,</span><br><span class="line">  [<span class="string">'a'</span>+<span class="string">'bc'</span>]: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;foo:'foo','abc':123&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Object.is()</strong>用来比较两个值是否严格相等,与===行为基本一致.<strong>不同之处在于+0不等于-0,NaN等于NaN</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span>;<span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>)<span class="comment">//false</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>;<span class="comment">//false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>Object.assign()</strong>用于对象合并,将源对象所有可枚举属性复制到目标对象.</p><ul><li>如果只有一个参数,直接返回该对象.</li><li>同名属性,后者会覆盖前者</li><li>Object.assign方法实行的是浅拷贝.如果某个属性的值是对象,那么目标对象拷贝的是这个对象的引用.</li></ul><p>Object.assign的用途.</p><ul><li>为对象添加属性</li><li>为对象添加方法(将函数放在空对象中)</li><li>克隆对象(和一个空对象合并)</li></ul><p><strong>Object.setPrototypeOf()</strong>设置一个对象的prototype对象,返回参数对象本身,它是ES6整数推荐的设置原型对象的方法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> proto = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a,proto);<span class="comment">//a.b === 2</span></span><br><span class="line"><span class="comment">//上面代码将proto对象设置为a对象的原型</span></span><br></pre></td></tr></table></figure><p><strong>Object.getPrototypeOf()</strong>用于读取一个对象的原型对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a);<span class="comment">//&#123;b:2&#125;</span></span><br></pre></td></tr></table></figure><p><strong>super关键字</strong>指向当前对象的原型对象.</p><p><strong>Object.keys()</strong>返回一个数组,成员是对象所有可遍历属性的键名.</p><p><strong>Object.values()</strong>返回一个数组,成员是对象所有可遍历属性的值.</p><p><strong>Object.entries()</strong>返回一个数组,成员是对象所有可遍历属性的键值对数组.</p><p><strong>对象也可用于解构赋值以及扩展运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;x,...y&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>,<span class="attr">z</span>:<span class="number">3</span>&#125;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y<span class="comment">// &#123;y:2,z:3&#125;</span></span><br><span class="line"><span class="keyword">let</span> z = &#123;...y&#125;<span class="comment">//&#123;y:2,z:3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Null</strong>传导运算符<code>?.</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = (msg &amp;&amp; msg.body&amp;&amp;msg.body.user || <span class="string">'default'</span>)</span><br><span class="line"><span class="comment">//使用null传导运算符</span></span><br><span class="line"><span class="keyword">const</span> first = (msg?.body?.user || <span class="string">'default'</span>)</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6引入了一种原始数据类型Symbol,表示独一无二的值.它是js第七种数据类型,分别是<code>undefined,null,Boolean,String,Number,Object,Symbol</code></p><p>由于symbol不是对象,而是数据类型,所以不能使用new,他是一种类似于字符串的的数据类型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line">s === s1;<span class="comment">//false,Symbol不能参与运算.</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj[s] = <span class="string">'hello'</span><span class="comment">//Symbol作为属性名不能用.运算形式,且不能被遍历到</span></span><br></pre></td></tr></table></figure><h3 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h3><p>ES6提供了新的数据结构Set,它类似于数组,但是成员都是唯一的,没有重复的值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除数组的重复成员</span></span><br><span class="line">[...new <span class="built_in">Set</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)]</span><br></pre></td></tr></table></figure><ul><li>Set,prototype.constructor: 构造函数,默认就是Set函数</li><li>Set.prototype.size: 返回set实例的成员总数</li></ul><p>Set的4个操作方法</p><ul><li>add(value): 添加某个值,返回set结构本身</li><li>delete(value):删除某个值,返回一个布尔值,表示是否成功</li><li>has(value): 返回一个布尔值,表示是否为Set成员.</li><li>clear():清除所有成员.</li></ul><p>Set的4个遍历方法</p><ul><li>keys():返回键名的遍历器</li><li>values():返回值得遍历器(默认遍历生成函数)</li><li>entries():返回键值对的遍历器</li><li>forEach():使用回调函数遍历每个成员</li></ul><p>ES6提供了Map数据类型,类似于对象,但他的”键”的范围不限于字符串,各种类型的值都可以作为键.</p><p>Map的实例属性与操作方法:</p><ul><li>size: Map结构的成员总数</li><li>set(key,value):设置键值,返回整个结构</li><li>get(key): 读取某个键的值,找不到key返回undefined</li><li>has(key):返回布尔值,表示某个键是否在当前Map对象中</li><li>delete(key):删除某个键,返回布尔值表示是否成功.</li><li>clear():清除所有.</li></ul><p>Map结构提供的遍历方法与Set相同.</p><h3 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h3><p>promise是异步编程的一种解决方案.它接受一个函数作为参数,函数有两个参数resolve和reject有js引擎提供,resolve函数将promise有未完成变为成功,reject由未完成变为失败.</p><p>promise实例生成后可以用then指定resolved和rejected状态的回调函数,并且then返回一个新的promise实例,所以可以链式调用.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*成功*/</span>)&#123;</span><br><span class="line">      resolve(value)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//success</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//error</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//一般来说,不要再then中定义rejected状态的回调函数,既then的第二个参数,而应该总是使用catch方法.</span></span><br></pre></td></tr></table></figure><p>promise.catch是.then(null,rejection)的别名,指定发生错误是的回调函数.</p><p>promise.all将多个promise实例包装成一个promise实例.全部成功才成功,有一个失败就是失败.</p><p>promise.race将多个promise包装为一个,只要其中有一个先改变状态,整个状态就会改变.</p><p>promise.finally方法用于指定不管promise的最后状态无论怎样都会执行,它接受一个普通的回调函数作为参数,不管怎样都必须执行.</p><h3 id="Iterator和for…of循环"><a href="#Iterator和for…of循环" class="headerlink" title="Iterator和for…of循环"></a>Iterator和for…of循环</h3><p>当使用for…of循环某种数据结构时,该循环会自动寻找Iterator接口.</p><p>一个对象只要具备Symbol.iterator属性就代表该对象可遍历.</p><p>默认调用Iterator接口的场合:</p><ul><li>解构赋值<code>let [x,y] = [1,2]</code></li><li>扩展运算符<code>[...arr]</code></li><li>yield<em>后面如果跟的是可遍历结构就会调用遍历器接口`yield\</em> [2,3,4]`</li><li>for…of,Array.from()…</li></ul><p>遍历器对象除了具有next()函数,还要return()和throw()</p><p>for..of与其他遍历语法比较.</p><ul><li>for循环</li><li>数组的forEach(无法跳出循环,break,return都不行)</li><li>for …in(主要是循环对象而设计,不适用于遍历数组)</li><li>for…of,与for..in一样简洁,可以跳出循环…</li></ul><h3 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h3><p>Generator是ES6题提供的异步编程解决方案.可以把它理解为一个状态机,封装了多个状态.还是一个遍历器对象生成函数.</p><p>Generator函数的特征:function与函数名之间有一个*号,函数体内部使用yield表达式定义不同的内部状态.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorld</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = helloWorld();</span><br><span class="line"><span class="comment">//generator函数调用后该函数并不执行,返回的也不是函数运行结果,而是遍历器对象Iterator.然后调用遍历器对象的next方法使得指针移动到下一个状态.</span></span><br><span class="line">hw.next();<span class="comment">//&#123;value:'hello',done:fasle&#125;</span></span><br><span class="line">hw.next();<span class="comment">//&#123;value:'world',done:false&#125;</span></span><br><span class="line">hw.next();<span class="comment">//&#123;value:'ending',done:true&#125;</span></span><br></pre></td></tr></table></figure><p>由于Generator函数返回一个遍历器对象,调用next才会遍历下一个内部状态,所以其实他是一个可以暂停执行的函数,yield就是暂停标志.next()遇到yield就会暂停后面的操作,并把yield后面表达式的值作为返回的value值,下一次调用next,再继续执行,知道遇到yield或return为止.另外yield表达式在其他地方使用都会报错.</p><p><strong>next()</strong>可以带一个参数,作为上一次yield表达式的返回值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span>*(<span class="keyword">yield</span> (x+<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y/<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x+y+z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line">a.next();<span class="comment">//&#123;value:6,done:fasle&#125;</span></span><br><span class="line">a.next();<span class="comment">//&#123;value:NaN,done:fasle&#125;</span></span><br><span class="line">a.next();<span class="comment">//&#123;value:NaN,done:fasle&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = foo(<span class="number">5</span>);</span><br><span class="line">b.next();<span class="comment">//&#123;value:6,done:fasle&#125;</span></span><br><span class="line">b.next(<span class="number">12</span>);<span class="comment">//&#123;value:8,done:fasle&#125;</span></span><br><span class="line">b.next(<span class="number">13</span>);<span class="comment">//&#123;value:42,done:fasle&#125;</span></span><br></pre></td></tr></table></figure><p><strong>for…of</strong>可以自动遍历Generator函数生成的遍历器对象,并且不再需要调用next方法.但函数return 的值不会再循环中.</p><p><strong>在Generator函数中调用Generator函数是没有效果的</strong>,这就需要用到<code>yield*</code>表达式,用来达成以上目的.并且任何数据结构只要有Iterator接口,就可以使用<code>yield*</code>遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* foo();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h3><p>ES6引入了async函数,使异步操作更加方便.async函数就是Generator函数的语法糖.它将*替换成async,将yield替换成await,仅此而已.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">  cosnt f1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/a.txt'</span>)</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/b.txt'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span>  readFile(<span class="string">'/etc/a.txt'</span>)</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span>  readFile(<span class="string">'/etc/b.txt'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>async对generator的改进</p><ul><li>内置执行器.async函数的执行与普通函数一样<code>gen()</code></li><li>更好的语义.比起*与yield,语义更清楚.</li><li>更广的适用性.async函数的await命令后面可以是promise对象和原始类型的值(但此时等同于同步操作).</li><li>返回值是promise对象,而generator返回的是一个Iterator遍历器.而async可以看做多个异步操作包装的promise对象,而await命令就是内部then的语法糖.</li></ul><p><strong>async函数内部return语句返回的值会成为then方法回调函数的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'helloWorld'</span></span><br><span class="line">&#125;</span><br><span class="line">f().then(<span class="function"><span class="params">v</span>=&gt;</span><span class="built_in">console</span>,log(v))<span class="comment">//'helloWorld'</span></span><br></pre></td></tr></table></figure><p>async函数内部抛出错误会导致promise对象变为reject状态.错误对象会被catch方法回调函数接收.</p><p><strong>正常情况下await后面是一个peomise对象,如果不是,会转成一个立即resolve的promise</strong></p><p>for await of 用来遍历异步的iterator接口.</p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>ES6引入class的概念,作为对象的模板,通过class关键字来定义类.</p><p>class其实只是一个语法糖,他的大部分功能ES5都可以做到,只是让对象原型的写法更像面向对象编程语法而已.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x+<span class="string">','</span>+<span class="keyword">this</span>.y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x,y)&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x+<span class="string">','</span>+<span class="keyword">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Point === Point.prototype.constructor<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point();</span><br></pre></td></tr></table></figure><p>toString是Point类内部定义的方法,它是不可枚举的,这与ES5不一致.</p><p><strong>类不存在变量提升</strong></p><p><strong>class的静态方法</strong>,类相当于实例的原型,所有类中定义的方法都会被实例继承,如果在一个方法前加上<code>static</code>关键字就表示该方法不会被实例继承,而是直接通过类来调用,这就成为静态方法.静态方法中的this指的是类而不是实例.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">static</span> hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'helloWorld'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo.hello()<span class="comment">//'helloWorld'</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Foo();</span><br><span class="line">h.hello()<span class="comment">//报错typeError...</span></span><br></pre></td></tr></table></figure><p><strong>父的静态方法可以被子类继承</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x,y)&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> hello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'helloWorld'</span></span><br><span class="line">  &#125;</span><br><span class="line">  toString()&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x,y,z)&#123;</span><br><span class="line">    <span class="keyword">super</span>(x,y)<span class="comment">//调用父类的constructor(x,y)</span></span><br><span class="line">    <span class="keyword">this</span>.z = z;</span><br><span class="line">  &#125;</span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.z +<span class="string">','</span>+<span class="keyword">super</span>.toString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Bar.hello()<span class="comment">//'helloWorld'</span></span><br></pre></td></tr></table></figure><p>super关键字表示父类的构造函数,用来新建父类的this对象.</p><p><strong>子类必须在constructor方法中调用super方法,否则新建实例会报错</strong>,这是因为子类没有自己的this对象而是继承父类的this对象,然后对其加工,不调用super()子类就得不到this对象.</p><p><strong>如果子类没有定义constructor,这个方法会被默认添加,super也会默认添加</strong>.只要调用super才能使用this关键字.</p><h3 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h3><p>修饰器函数用来修改类的行为,是对一个类进行处理的函数,修饰器函数的第一个参数就是说要修身的目标类.如果觉得一个参数不够用,可以再修饰器外再封装一层函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@testable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>()</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.isTest = <span class="literal">true</span>;<span class="comment">//静态属性</span></span><br><span class="line">    target.prototype.isOk = <span class="literal">false</span>;<span class="comment">//实例属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  MyTest.isTest <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>修饰器实在代码编译时发生的,这意味着修饰器本质就是编译时执行的函数.</p><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>export 用于规定模块的对外接口.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import 用于输入其他模块提供的功能.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span></span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">as</span> A <span class="keyword">from</span> <span class="string">'./xxx'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> num <span class="keyword">from</span> <span class="string">'./xxx'</span></span><br></pre></td></tr></table></figure><p>如果import要取代Node的require方法就形成了障碍,因为require是运行时加载模块,而import无法取代require的动态加载功能.CommonJS输出的是一个值得拷贝,而ES6模块输出的是值得引用.</p><p><strong>浏览器加载ES6模块,也使用<code>&lt;script&gt;</code>,但要加入type=’module’属性</strong>告诉浏览器这是一个ES6模块.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;let声明的变量只在代码块内有效&lt;/li&gt;
&lt;li&gt;不存在变量提升&lt;/li&gt;
&lt;li&gt;let声明变量之前,该变量都是不可
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深圳大梅沙看海</title>
    <link href="http://yoursite.com/2015/10/29/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E6%A2%85%E6%B2%99%E7%9C%8B%E6%B5%B7/"/>
    <id>http://yoursite.com/2015/10/29/深圳大梅沙看海/</id>
    <published>2015-10-29T06:18:00.000Z</published>
    <updated>2017-12-26T06:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨日风和日丽,携友出行,至大梅沙海滨公园,拍数照以作留念.</p></blockquote><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1962.JPG" alt="沙滩"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1964.JPG" alt="海边"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1957.JPG" alt="me"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1950.JPG" alt="海浪"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1941.JPG" alt="海边"></p><p><img src="http://oy299xjr2.bkt.clouddn.com/IMG_1942.JPG" alt="随拍"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;昨日风和日丽,携友出行,至大梅沙海滨公园,拍数照以作留念.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://oy299xjr2.bkt.clouddn.com/IMG_1962.JPG&quot; alt=&quot;沙滩&quot;&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="旅行" scheme="http://yoursite.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="http://yoursite.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>重温&lt;&lt;计算机操作系统&gt;&gt;</title>
    <link href="http://yoursite.com/2015/10/18/%E9%87%8D%E6%B8%A9-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2015/10/18/重温-计算机操作系统/</id>
    <published>2015-10-18T07:19:25.000Z</published>
    <updated>2017-11-14T06:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>并行是指两个或多个事件在同一时刻发生,而并发是两个或多个事件在同一时间间隔内发生.在多道程序环境下,并发性是指在一段时间内宏观上有多个程序在同时运行,但在单处理机系统中,每一时刻却仅能有一道程序执行,故微观上这些程序只能是分时的交替执行.倘若在多处理机,这些可以并发执行的程序便可分配到多个处理机上,实现并行执行.</p><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>如果某个系统支持两个或多个动作<strong>同时存在</strong>,name这个系统就是一个并发系统.如果某个系统支持两个或多个动作<strong>同时执行</strong>,那么这个系统就是一个并行系统.并发系统与并行系统这两个定义之间的关键差异在于<strong>存在</strong>这个词.  在并发程序中可以同时拥有两个或多个线程,这意味着,如果程序在单核处理器上运行,那么这两个线程将交替换入或换出内存.这些线程是同时<strong>存在</strong>的,每个线程都处于执行过程中的某个状态.如果程序能够并行执行,那么就一定是运行在多核处理器上的.此时,程序中的每个线程都将分配到一个独立的处理器核上,因此可以同时运行.  我相信你已经能够得出结论:”并行概念是并发概念的一个子集”.也就是说,你可以编写一个拥有多个线程或进程的并发程序,但如果没有多核处理器来执行这个程序,那么就不能以并行的方式来运行代码.因此,凡是在求解单个问题涉及多个执行流程的编程模式或执行行为,都属于并发编程的范畴.  摘自:&lt;&lt;并发的艺术&gt;&gt;-[美]布雷谢斯 </p><p>Erlang 之父 Joe Armstrong 用一张5岁小孩都能看懂的图解释了并发与并行的区别.<br><img src="http://oy299xjr2.bkt.clouddn.com/v2-674f0d37fca4fac1bd2df28a2b78e633_r.jpg" alt="并发与并行图解"><br>从图中可以看出,并发是两个队列交替使用一台咖啡机,并行是两个队列同时使用两台咖啡机.如果串行,一个队列使用一台咖啡机.并发和并行都可以是多个线程,就看这些线程能不能同时被多个CPU执行,如果可以说明是并行,而并发是多个线程被一个CPU轮流切换着执行.</p><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>对进程较为经典的定义有:</p><pre><code>1. 进程是一个程序及其数据在处理机上顺序执行时所发生的活动.2. 进程是程序在一个数据集合上运行的过程,它是系统进行资源分配和调度的一个独立单位.3. 系统为每个进程定义了一个数据结构-进程控制块(PCB).OS根据PCB来对并发执行的进程进行控制和管理.</code></pre><p>线程和进程的比较: </p><pre><code>1. 再引入线程的操作系统中,通常一个进程都拥有若干个线程,至少有一个线程.2. 进程为资源拥有的最小单位,而线程作为调度和分派的基本单位,线程不拥有系统资源,可以访问资源.</code></pre><h4 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h4><p>进程和线程的主要差别在于他们是不同的操作系统资源的管理方式.进程有独立的地址空间,一个进程崩溃后,在保护模式下不会对其他进程产生影响,而线程只是一个进程中的不同执行路径.线程有自己的堆栈和局部变量,但线程没有单独的地址空间,一个线程死掉就等于整个进程死掉,所以在进程切换时,耗费资源较大,效率变差.但对于一些要求同时进行并且又要共享某些变量的并发操作,只能用进程,不能用线程.</p><h2 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h2><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>生产者消费者问题是一个经典的多进程同步问题,也叫缓存绑定问题.  既有两个进程:一组生产者进程和一组消费者进程共享一个初始值为空固定大小为n的缓存区.生产者的工作是制造一段数据,只要缓存没满就放入缓存区,否则必须等待,如此反复.同时,只要缓存区不为空,消费者才能从中取出消息,一个取出一段数据,否则只能等待.由于缓存区是临界资源,它只允许一个生产者放入消息,或一个消费者从中取出消息.  问题的核心是要保证不让生产者在缓存满的时候还要向内写数据,不让消费者试图从空的缓存中取出数据.</p><h4 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h4><p>生产者和消费者对缓存区互斥访问是互斥关系,同时又是相互协作关系,即同步关系.那么需要解决的是互斥和同步PV操作的位置.使用”进程间通信”即可解决唤醒问题:  我们使用了两个信号标:full和empty.信号量mutex作为互斥信号量.用于控制互斥访问缓存池,互斥信号量初始值为1.信号量full用于记录当前缓冲池中”满”缓冲区数,初始值为0.信号量empty用于记录当前缓存区”空”缓存区数,初始值为n.新的数据增加后,full增加,empty减少.如果生产和试图在empty为0时减少其值,生产者就会被”催眠”.下一轮中有数据消费掉时,empty就会增加,生产者就会被”唤醒”.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>;<span class="comment">//临界区互斥信号量</span></span><br><span class="line">semaphore empty = n;<span class="comment">//空闲缓存区</span></span><br><span class="line">semaphore full = <span class="number">1</span>;<span class="comment">//缓存区初始化为空</span></span><br><span class="line">produce()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        produce an item in dextp;<span class="comment">//生产数据</span></span><br><span class="line">        P(empty);<span class="comment">//获取空缓存区单元</span></span><br><span class="line">        P(mutex);<span class="comment">//进入临界区</span></span><br><span class="line">        add nextp to buffer;<span class="comment">//将数据放入缓存区</span></span><br><span class="line">        V(mutex);<span class="comment">//离开临界区,释放互斥信号量</span></span><br><span class="line">        V(full)<span class="comment">//满缓存区加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">consume()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(full);<span class="comment">//获取满缓存区单元</span></span><br><span class="line">        P(mutex);<span class="comment">//进入临界区</span></span><br><span class="line">        remove an item from buffer;<span class="comment">//拿走数据</span></span><br><span class="line">        V(mutex);<span class="comment">//离开临界区</span></span><br><span class="line">        V(empty);<span class="comment">//空缓存区单元加1</span></span><br><span class="line">        consume the item<span class="comment">//消费数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并发与并行&quot;&gt;&lt;a href=&quot;#并发与并行&quot; class=&quot;headerlink&quot; title=&quot;并发与并行&quot;&gt;&lt;/a&gt;并发与并行&lt;/h2&gt;&lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
      <category term="理解计算机" scheme="http://yoursite.com/categories/%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计算机基础 操作系统" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
